/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xorshift";
exports.ids = ["vendor-chunks/xorshift"];
exports.modules = {

/***/ "(action-browser)/./node_modules/xorshift/xorshift.js":
/*!*******************************************!*\
  !*** ./node_modules/xorshift/xorshift.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n/**\n * Create a pseudorandom number generator, with a seed.\n * @param {array} seed \"128-bit\" integer, composed of 4x32-bit\n * integers in big endian order.\n */\nfunction XorShift(seed) {\n  // Note the extension, this === module.exports is required because\n  // the `constructor` function will be used to generate new instances.\n  // In that case `this` will point to the default RNG, and `this` will\n  // be an instance of XorShift.\n  if (!(this instanceof XorShift) || this === module.exports) {\n    return new XorShift(seed);\n  }\n\n  if (!Array.isArray(seed) || seed.length !== 4) {\n    throw new TypeError('seed must be an array with 4 numbers');\n  }\n\n  // uint64_t s = [seed ...]\n  this._state0U = seed[0] | 0;\n  this._state0L = seed[1] | 0;\n  this._state1U = seed[2] | 0;\n  this._state1L = seed[3] | 0;\n}\n\n/**\n * Returns a 64bit random number as a 2x32bit array\n * @return {array}\n */\nXorShift.prototype.randomint = function() {\n  // uint64_t s1 = s[0]\n  var s1U = this._state0U, s1L = this._state0L;\n  // uint64_t s0 = s[1]\n  var s0U = this._state1U, s0L = this._state1L;\n\n  // result = s0 + s1\n  var sumL = (s0L >>> 0) + (s1L >>> 0);\n  var resU = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\n  var resL = sumL >>> 0;\n\n  // s[0] = s0\n  this._state0U = s0U;\n  this._state0L = s0L;\n\n  // - t1 = [0, 0]\n  var t1U = 0, t1L = 0;\n  // - t2 = [0, 0]\n  var t2U = 0, t2L = 0;\n\n  // s1 ^= s1 << 23;\n  // :: t1 = s1 << 23\n  var a1 = 23;\n  var m1 = 0xFFFFFFFF << (32 - a1);\n  t1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\n  t1L = s1L << a1;\n  // :: s1 = s1 ^ t1\n  s1U = s1U ^ t1U;\n  s1L = s1L ^ t1L;\n\n  // t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\n  // :: t1 = s1 ^ s0\n  t1U = s1U ^ s0U;\n  t1L = s1L ^ s0L;\n  // :: t2 = s1 >> 18\n  var a2 = 18;\n  var m2 = 0xFFFFFFFF >>> (32 - a2);\n  t2U = s1U >>> a2;\n  t2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n  // :: t2 = s0 >> 5\n  var a3 = 5;\n  var m3 = 0xFFFFFFFF >>> (32 - a3);\n  t2U = s0U >>> a3;\n  t2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n\n  // s[1] = t1\n  this._state1U = t1U;\n  this._state1L = t1L;\n\n  // return result\n  return [resU, resL];\n};\n\n/**\n * Returns a random number normalized [0, 1), just like Math.random()\n * @return {number}\n */\nXorShift.prototype.random = function() {\n  var t2 = this.randomint();\n  // Math.pow(2, -32) = 2.3283064365386963e-10\n  // Math.pow(2, -52) = 2.220446049250313e-16\n  return t2[0] * 2.3283064365386963e-10 + (t2[1] >>> 12) * 2.220446049250313e-16;\n};\n\n// Seed with Math.random() by default to prevent seed collision\nfunction getRandomSeed() {\n    return Math.random() * Math.pow(2, 32);\n}\nmodule.exports = new XorShift([\n  getRandomSeed(),\n  getRandomSeed(),\n  getRandomSeed(),\n  getRandomSeed()\n]);\n\n// Export constructor under its own name so that consumers using ES2015\n// can write `import { XorShift } from 'xorshift'`.\nmodule.exports.XorShift = XorShift;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94b3JzaGlmdC94b3JzaGlmdC5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsV0FBVztBQUNsQyx1QkFBdUIiLCJzb3VyY2VzIjpbIkM6XFxyZXBvXFxOdXRyaVdpc2VBSVxcbm9kZV9tb2R1bGVzXFx4b3JzaGlmdFxceG9yc2hpZnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIENyZWF0ZSBhIHBzZXVkb3JhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLCB3aXRoIGEgc2VlZC5cbiAqIEBwYXJhbSB7YXJyYXl9IHNlZWQgXCIxMjgtYml0XCIgaW50ZWdlciwgY29tcG9zZWQgb2YgNHgzMi1iaXRcbiAqIGludGVnZXJzIGluIGJpZyBlbmRpYW4gb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIFhvclNoaWZ0KHNlZWQpIHtcbiAgLy8gTm90ZSB0aGUgZXh0ZW5zaW9uLCB0aGlzID09PSBtb2R1bGUuZXhwb3J0cyBpcyByZXF1aXJlZCBiZWNhdXNlXG4gIC8vIHRoZSBgY29uc3RydWN0b3JgIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCB0byBnZW5lcmF0ZSBuZXcgaW5zdGFuY2VzLlxuICAvLyBJbiB0aGF0IGNhc2UgYHRoaXNgIHdpbGwgcG9pbnQgdG8gdGhlIGRlZmF1bHQgUk5HLCBhbmQgYHRoaXNgIHdpbGxcbiAgLy8gYmUgYW4gaW5zdGFuY2Ugb2YgWG9yU2hpZnQuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBYb3JTaGlmdCkgfHwgdGhpcyA9PT0gbW9kdWxlLmV4cG9ydHMpIHtcbiAgICByZXR1cm4gbmV3IFhvclNoaWZ0KHNlZWQpO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHNlZWQpIHx8IHNlZWQubGVuZ3RoICE9PSA0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2VlZCBtdXN0IGJlIGFuIGFycmF5IHdpdGggNCBudW1iZXJzJyk7XG4gIH1cblxuICAvLyB1aW50NjRfdCBzID0gW3NlZWQgLi4uXVxuICB0aGlzLl9zdGF0ZTBVID0gc2VlZFswXSB8IDA7XG4gIHRoaXMuX3N0YXRlMEwgPSBzZWVkWzFdIHwgMDtcbiAgdGhpcy5fc3RhdGUxVSA9IHNlZWRbMl0gfCAwO1xuICB0aGlzLl9zdGF0ZTFMID0gc2VlZFszXSB8IDA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIDY0Yml0IHJhbmRvbSBudW1iZXIgYXMgYSAyeDMyYml0IGFycmF5XG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuWG9yU2hpZnQucHJvdG90eXBlLnJhbmRvbWludCA9IGZ1bmN0aW9uKCkge1xuICAvLyB1aW50NjRfdCBzMSA9IHNbMF1cbiAgdmFyIHMxVSA9IHRoaXMuX3N0YXRlMFUsIHMxTCA9IHRoaXMuX3N0YXRlMEw7XG4gIC8vIHVpbnQ2NF90IHMwID0gc1sxXVxuICB2YXIgczBVID0gdGhpcy5fc3RhdGUxVSwgczBMID0gdGhpcy5fc3RhdGUxTDtcblxuICAvLyByZXN1bHQgPSBzMCArIHMxXG4gIHZhciBzdW1MID0gKHMwTCA+Pj4gMCkgKyAoczFMID4+PiAwKTtcbiAgdmFyIHJlc1UgPSAoczBVICsgczFVICsgKHN1bUwgLyAyID4+PiAzMSkpID4+PiAwO1xuICB2YXIgcmVzTCA9IHN1bUwgPj4+IDA7XG5cbiAgLy8gc1swXSA9IHMwXG4gIHRoaXMuX3N0YXRlMFUgPSBzMFU7XG4gIHRoaXMuX3N0YXRlMEwgPSBzMEw7XG5cbiAgLy8gLSB0MSA9IFswLCAwXVxuICB2YXIgdDFVID0gMCwgdDFMID0gMDtcbiAgLy8gLSB0MiA9IFswLCAwXVxuICB2YXIgdDJVID0gMCwgdDJMID0gMDtcblxuICAvLyBzMSBePSBzMSA8PCAyMztcbiAgLy8gOjogdDEgPSBzMSA8PCAyM1xuICB2YXIgYTEgPSAyMztcbiAgdmFyIG0xID0gMHhGRkZGRkZGRiA8PCAoMzIgLSBhMSk7XG4gIHQxVSA9IChzMVUgPDwgYTEpIHwgKChzMUwgJiBtMSkgPj4+ICgzMiAtIGExKSk7XG4gIHQxTCA9IHMxTCA8PCBhMTtcbiAgLy8gOjogczEgPSBzMSBeIHQxXG4gIHMxVSA9IHMxVSBeIHQxVTtcbiAgczFMID0gczFMIF4gdDFMO1xuXG4gIC8vIHQxID0gKCBzMSBeIHMwIF4gKCBzMSA+PiAxNyApIF4gKCBzMCA+PiAyNiApIClcbiAgLy8gOjogdDEgPSBzMSBeIHMwXG4gIHQxVSA9IHMxVSBeIHMwVTtcbiAgdDFMID0gczFMIF4gczBMO1xuICAvLyA6OiB0MiA9IHMxID4+IDE4XG4gIHZhciBhMiA9IDE4O1xuICB2YXIgbTIgPSAweEZGRkZGRkZGID4+PiAoMzIgLSBhMik7XG4gIHQyVSA9IHMxVSA+Pj4gYTI7XG4gIHQyTCA9IChzMUwgPj4+IGEyKSB8ICgoczFVICYgbTIpIDw8ICgzMiAtIGEyKSk7XG4gIC8vIDo6IHQxID0gdDEgXiB0MlxuICB0MVUgPSB0MVUgXiB0MlU7XG4gIHQxTCA9IHQxTCBeIHQyTDtcbiAgLy8gOjogdDIgPSBzMCA+PiA1XG4gIHZhciBhMyA9IDU7XG4gIHZhciBtMyA9IDB4RkZGRkZGRkYgPj4+ICgzMiAtIGEzKTtcbiAgdDJVID0gczBVID4+PiBhMztcbiAgdDJMID0gKHMwTCA+Pj4gYTMpIHwgKChzMFUgJiBtMykgPDwgKDMyIC0gYTMpKTtcbiAgLy8gOjogdDEgPSB0MSBeIHQyXG4gIHQxVSA9IHQxVSBeIHQyVTtcbiAgdDFMID0gdDFMIF4gdDJMO1xuXG4gIC8vIHNbMV0gPSB0MVxuICB0aGlzLl9zdGF0ZTFVID0gdDFVO1xuICB0aGlzLl9zdGF0ZTFMID0gdDFMO1xuXG4gIC8vIHJldHVybiByZXN1bHRcbiAgcmV0dXJuIFtyZXNVLCByZXNMXTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgbm9ybWFsaXplZCBbMCwgMSksIGp1c3QgbGlrZSBNYXRoLnJhbmRvbSgpXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblhvclNoaWZ0LnByb3RvdHlwZS5yYW5kb20gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHQyID0gdGhpcy5yYW5kb21pbnQoKTtcbiAgLy8gTWF0aC5wb3coMiwgLTMyKSA9IDIuMzI4MzA2NDM2NTM4Njk2M2UtMTBcbiAgLy8gTWF0aC5wb3coMiwgLTUyKSA9IDIuMjIwNDQ2MDQ5MjUwMzEzZS0xNlxuICByZXR1cm4gdDJbMF0gKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwICsgKHQyWzFdID4+PiAxMikgKiAyLjIyMDQ0NjA0OTI1MDMxM2UtMTY7XG59O1xuXG4vLyBTZWVkIHdpdGggTWF0aC5yYW5kb20oKSBieSBkZWZhdWx0IHRvIHByZXZlbnQgc2VlZCBjb2xsaXNpb25cbmZ1bmN0aW9uIGdldFJhbmRvbVNlZWQoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCAzMik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBYb3JTaGlmdChbXG4gIGdldFJhbmRvbVNlZWQoKSxcbiAgZ2V0UmFuZG9tU2VlZCgpLFxuICBnZXRSYW5kb21TZWVkKCksXG4gIGdldFJhbmRvbVNlZWQoKVxuXSk7XG5cbi8vIEV4cG9ydCBjb25zdHJ1Y3RvciB1bmRlciBpdHMgb3duIG5hbWUgc28gdGhhdCBjb25zdW1lcnMgdXNpbmcgRVMyMDE1XG4vLyBjYW4gd3JpdGUgYGltcG9ydCB7IFhvclNoaWZ0IH0gZnJvbSAneG9yc2hpZnQnYC5cbm1vZHVsZS5leHBvcnRzLlhvclNoaWZ0ID0gWG9yU2hpZnQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xorshift/xorshift.js\n");

/***/ })

};
;