"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-cloud";
exports.ids = ["vendor-chunks/@google-cloud"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.countTokens = void 0;\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst constants = __webpack_require__(/*! ../util/constants */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\nconst post_fetch_processing_1 = __webpack_require__(/*! ./post_fetch_processing */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js\");\nconst post_request_1 = __webpack_require__(/*! ./post_request */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js\");\n/**\n * Make a async request to count tokens.\n * @param request A CountTokensRequest object with the request contents.\n * @returns The CountTokensResponse object with the token count.\n */\nasync function countTokens(location, resourcePath, token, request, apiEndpoint, requestOptions) {\n    const response = await (0, post_request_1.postRequest)({\n        region: location,\n        resourcePath: resourcePath,\n        resourceMethod: constants.COUNT_TOKENS_METHOD,\n        token: await token,\n        data: request,\n        apiEndpoint: apiEndpoint,\n        requestOptions: requestOptions,\n    }).catch(e => {\n        throw new errors_1.GoogleGenerativeAIError('exception posting request', e);\n    });\n    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {\n        throw e;\n    });\n    return (0, post_fetch_processing_1.processCountTokenResponse)(response);\n}\nexports.countTokens = countTokens;\n//# sourceMappingURL=count_tokens.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9mdW5jdGlvbnMvY291bnRfdG9rZW5zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLGlCQUFpQixtQkFBTyxDQUFDLHlHQUFpQjtBQUMxQyxrQkFBa0IsbUJBQU8sQ0FBQyw2R0FBbUI7QUFDN0MsZ0NBQWdDLG1CQUFPLENBQUMsb0lBQXlCO0FBQ2pFLHVCQUF1QixtQkFBTyxDQUFDLGtIQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvdmVydGV4YWkvYnVpbGQvc3JjL2Z1bmN0aW9ucy9jb3VudF90b2tlbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb3VudFRva2VucyA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL3R5cGVzL2Vycm9yc1wiKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi91dGlsL2NvbnN0YW50c1wiKTtcbmNvbnN0IHBvc3RfZmV0Y2hfcHJvY2Vzc2luZ18xID0gcmVxdWlyZShcIi4vcG9zdF9mZXRjaF9wcm9jZXNzaW5nXCIpO1xuY29uc3QgcG9zdF9yZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9wb3N0X3JlcXVlc3RcIik7XG4vKipcbiAqIE1ha2UgYSBhc3luYyByZXF1ZXN0IHRvIGNvdW50IHRva2Vucy5cbiAqIEBwYXJhbSByZXF1ZXN0IEEgQ291bnRUb2tlbnNSZXF1ZXN0IG9iamVjdCB3aXRoIHRoZSByZXF1ZXN0IGNvbnRlbnRzLlxuICogQHJldHVybnMgVGhlIENvdW50VG9rZW5zUmVzcG9uc2Ugb2JqZWN0IHdpdGggdGhlIHRva2VuIGNvdW50LlxuICovXG5hc3luYyBmdW5jdGlvbiBjb3VudFRva2Vucyhsb2NhdGlvbiwgcmVzb3VyY2VQYXRoLCB0b2tlbiwgcmVxdWVzdCwgYXBpRW5kcG9pbnQsIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcG9zdF9yZXF1ZXN0XzEucG9zdFJlcXVlc3QpKHtcbiAgICAgICAgcmVnaW9uOiBsb2NhdGlvbixcbiAgICAgICAgcmVzb3VyY2VQYXRoOiByZXNvdXJjZVBhdGgsXG4gICAgICAgIHJlc291cmNlTWV0aG9kOiBjb25zdGFudHMuQ09VTlRfVE9LRU5TX01FVEhPRCxcbiAgICAgICAgdG9rZW46IGF3YWl0IHRva2VuLFxuICAgICAgICBkYXRhOiByZXF1ZXN0LFxuICAgICAgICBhcGlFbmRwb2ludDogYXBpRW5kcG9pbnQsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiByZXF1ZXN0T3B0aW9ucyxcbiAgICB9KS5jYXRjaChlID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkdvb2dsZUdlbmVyYXRpdmVBSUVycm9yKCdleGNlcHRpb24gcG9zdGluZyByZXF1ZXN0JywgZSk7XG4gICAgfSk7XG4gICAgYXdhaXQgKDAsIHBvc3RfZmV0Y2hfcHJvY2Vzc2luZ18xLnRocm93RXJyb3JJZk5vdE9LKShyZXNwb25zZSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCBwb3N0X2ZldGNoX3Byb2Nlc3NpbmdfMS5wcm9jZXNzQ291bnRUb2tlblJlc3BvbnNlKShyZXNwb25zZSk7XG59XG5leHBvcnRzLmNvdW50VG9rZW5zID0gY291bnRUb2tlbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudF90b2tlbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateContentStream = exports.generateContent = void 0;\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst constants = __webpack_require__(/*! ../util/constants */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\nconst post_fetch_processing_1 = __webpack_require__(/*! ./post_fetch_processing */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js\");\nconst post_request_1 = __webpack_require__(/*! ./post_request */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js\");\nconst pre_fetch_processing_1 = __webpack_require__(/*! ./pre_fetch_processing */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js\");\n/**\n * Make a async call to generate content.\n * @param request A GenerateContentRequest object with the request contents.\n * @returns The GenerateContentResponse object with the response candidates.\n */\nasync function generateContent(location, resourcePath, token, request, apiEndpoint, generationConfig, safetySettings, tools, toolConfig, requestOptions) {\n    var _a, _b, _c, _d;\n    request = (0, pre_fetch_processing_1.formatContentRequest)(request, generationConfig, safetySettings);\n    (0, pre_fetch_processing_1.validateGenerateContentRequest)(request);\n    if (request.generationConfig) {\n        request.generationConfig = (0, pre_fetch_processing_1.validateGenerationConfig)(request.generationConfig);\n    }\n    const generateContentRequest = {\n        contents: request.contents,\n        systemInstruction: request.systemInstruction,\n        cachedContent: request.cachedContent,\n        generationConfig: (_a = request.generationConfig) !== null && _a !== void 0 ? _a : generationConfig,\n        safetySettings: (_b = request.safetySettings) !== null && _b !== void 0 ? _b : safetySettings,\n        tools: (_c = request.tools) !== null && _c !== void 0 ? _c : tools,\n        toolConfig: (_d = request.toolConfig) !== null && _d !== void 0 ? _d : toolConfig,\n        labels: request.labels,\n    };\n    const response = await (0, post_request_1.postRequest)({\n        region: location,\n        resourcePath,\n        resourceMethod: constants.GENERATE_CONTENT_METHOD,\n        token: await token,\n        data: generateContentRequest,\n        apiEndpoint,\n        requestOptions,\n        apiVersion: (0, pre_fetch_processing_1.getApiVersion)(request),\n    }).catch(e => {\n        throw new errors_1.GoogleGenerativeAIError('exception posting request to model', e);\n    });\n    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {\n        throw e;\n    });\n    return (0, post_fetch_processing_1.processUnary)(response);\n}\nexports.generateContent = generateContent;\n/**\n * Make an async stream request to generate content. The response will be\n * returned in stream.\n * @param {GenerateContentRequest} request - {@link GenerateContentRequest}\n * @returns {Promise<StreamGenerateContentResult>} Promise of {@link\n *     StreamGenerateContentResult}\n */\nasync function generateContentStream(location, resourcePath, token, request, apiEndpoint, generationConfig, safetySettings, tools, toolConfig, requestOptions) {\n    var _a, _b, _c, _d;\n    request = (0, pre_fetch_processing_1.formatContentRequest)(request, generationConfig, safetySettings);\n    (0, pre_fetch_processing_1.validateGenerateContentRequest)(request);\n    if (request.generationConfig) {\n        request.generationConfig = (0, pre_fetch_processing_1.validateGenerationConfig)(request.generationConfig);\n    }\n    const generateContentRequest = {\n        contents: request.contents,\n        systemInstruction: request.systemInstruction,\n        cachedContent: request.cachedContent,\n        generationConfig: (_a = request.generationConfig) !== null && _a !== void 0 ? _a : generationConfig,\n        safetySettings: (_b = request.safetySettings) !== null && _b !== void 0 ? _b : safetySettings,\n        tools: (_c = request.tools) !== null && _c !== void 0 ? _c : tools,\n        toolConfig: (_d = request.toolConfig) !== null && _d !== void 0 ? _d : toolConfig,\n        labels: request.labels,\n    };\n    const response = await (0, post_request_1.postRequest)({\n        region: location,\n        resourcePath,\n        resourceMethod: constants.STREAMING_GENERATE_CONTENT_METHOD,\n        token: await token,\n        data: generateContentRequest,\n        apiEndpoint,\n        requestOptions,\n        apiVersion: (0, pre_fetch_processing_1.getApiVersion)(request),\n    }).catch(e => {\n        throw new errors_1.GoogleGenerativeAIError('exception posting request', e);\n    });\n    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {\n        throw e;\n    });\n    return (0, post_fetch_processing_1.processStream)(response);\n}\nexports.generateContentStream = generateContentStream;\n//# sourceMappingURL=generate_content.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processCountTokenResponse = exports.processUnary = exports.aggregateResponses = exports.processStream = exports.throwErrorIfNotOK = void 0;\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nasync function throwErrorIfNotOK(response) {\n    if (response === undefined) {\n        throw new errors_1.GoogleGenerativeAIError('response is undefined');\n    }\n    if (!response.ok) {\n        const status = response.status;\n        const statusText = response.statusText;\n        const errorBody = await response.json();\n        const errorMessage = `got status: ${status} ${statusText}. ${JSON.stringify(errorBody)}`;\n        if (status >= 400 && status < 500) {\n            const error = new errors_1.ClientError(errorMessage, new errors_1.GoogleApiError(errorBody.error.message, errorBody.error.code, errorBody.error.status, errorBody.error.details));\n            throw error;\n        }\n        throw new errors_1.GoogleGenerativeAIError(errorMessage);\n    }\n}\nexports.throwErrorIfNotOK = throwErrorIfNotOK;\nconst responseLineRE = /^data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\nasync function* generateResponseSequence(stream) {\n    const reader = stream.getReader();\n    while (true) {\n        const { value, done } = await reader.read();\n        if (done) {\n            break;\n        }\n        yield addMissingIndexAndRole(value);\n    }\n}\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n * @ignore\n */\nasync function processStream(response) {\n    if (response === undefined) {\n        throw new errors_1.GoogleGenerativeAIError('Error processing stream because response === undefined');\n    }\n    if (!response.body) {\n        throw new errors_1.GoogleGenerativeAIError('Error processing stream because response.body not found');\n    }\n    const inputStream = response.body.pipeThrough(new TextDecoderStream('utf8', { fatal: true }));\n    const responseStream = getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return Promise.resolve({\n        stream: generateResponseSequence(stream1),\n        response: getResponsePromise(stream2),\n    });\n}\nexports.processStream = processStream;\nasync function getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            return aggregateResponses(allResponses);\n        }\n        allResponses.push(value);\n    }\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n * @ignore\n */\nfunction getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start(controller) {\n            let currentText = '';\n            return pump();\n            function pump() {\n                return reader.read().then(({ value, done }) => {\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new errors_1.GoogleGenerativeAIError(`Failed to parse final chunk of stream: ${currentText}`));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match(responseLineRE);\n                    let parsedResponse;\n                    while (match) {\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        }\n                        catch (e) {\n                            controller.error(new errors_1.GoogleGenerativeAIError(`Error parsing JSON response from stream chunk: \"${match[1]}\"`));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match(responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        },\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n * @ignore\n * @VisibleForTesting\n */\nfunction aggregateResponses(responses) {\n    var _a, _b, _c, _d;\n    const lastResponse = responses[responses.length - 1];\n    if (lastResponse === undefined) {\n        throw new errors_1.GoogleGenerativeAIError('Error aggregating stream chunks because the final response in stream chunk is undefined');\n    }\n    const aggregatedResponse = {};\n    if (lastResponse.promptFeedback) {\n        aggregatedResponse.promptFeedback = lastResponse.promptFeedback;\n    }\n    if (lastResponse.usageMetadata) {\n        aggregatedResponse.usageMetadata = lastResponse.usageMetadata;\n    }\n    for (const response of responses) {\n        if (!response.candidates || response.candidates.length === 0) {\n            continue;\n        }\n        for (let i = 0; i < response.candidates.length; i++) {\n            if (!aggregatedResponse.candidates) {\n                aggregatedResponse.candidates = [];\n            }\n            if (!aggregatedResponse.candidates[i]) {\n                aggregatedResponse.candidates[i] = {\n                    index: (_a = response.candidates[i].index) !== null && _a !== void 0 ? _a : i,\n                    content: {\n                        role: (_c = (_b = response.candidates[i].content) === null || _b === void 0 ? void 0 : _b.role) !== null && _c !== void 0 ? _c : util_1.constants.MODEL_ROLE,\n                        parts: [{ text: '' }],\n                    },\n                };\n            }\n            const citationMetadataAggregated = aggregateCitationMetadataForCandidate(response.candidates[i], aggregatedResponse.candidates[i]);\n            if (citationMetadataAggregated) {\n                aggregatedResponse.candidates[i].citationMetadata =\n                    citationMetadataAggregated;\n            }\n            const finishResonOfChunk = response.candidates[i].finishReason;\n            if (finishResonOfChunk) {\n                aggregatedResponse.candidates[i].finishReason =\n                    response.candidates[i].finishReason;\n            }\n            const finishMessageOfChunk = response.candidates[i].finishMessage;\n            if (finishMessageOfChunk) {\n                aggregatedResponse.candidates[i].finishMessage = finishMessageOfChunk;\n            }\n            const safetyRatingsOfChunk = response.candidates[i].safetyRatings;\n            if (safetyRatingsOfChunk) {\n                aggregatedResponse.candidates[i].safetyRatings = safetyRatingsOfChunk;\n            }\n            if (response.candidates[i].content &&\n                response.candidates[i].content.parts &&\n                response.candidates[i].content.parts.length > 0) {\n                const { parts } = aggregatedResponse.candidates[i].content;\n                for (const part of response.candidates[i].content.parts) {\n                    // NOTE: cannot have text and functionCall both in the same part.\n                    // add functionCall(s) to new parts.\n                    if (part.text) {\n                        parts[0].text += part.text;\n                    }\n                    if (part.functionCall) {\n                        parts.push({ functionCall: part.functionCall });\n                    }\n                }\n            }\n            const groundingMetadataAggregated = aggregateGroundingMetadataForCandidate(response.candidates[i], aggregatedResponse.candidates[i]);\n            if (groundingMetadataAggregated) {\n                aggregatedResponse.candidates[i].groundingMetadata =\n                    groundingMetadataAggregated;\n            }\n        }\n    }\n    if ((_d = aggregatedResponse.candidates) === null || _d === void 0 ? void 0 : _d.length) {\n        aggregatedResponse.candidates.forEach(candidate => {\n            if (candidate.content.parts.length > 1 &&\n                candidate.content.parts[0].text === '') {\n                candidate.content.parts.shift(); // remove empty text parameter\n            }\n        });\n    }\n    return aggregatedResponse;\n}\nexports.aggregateResponses = aggregateResponses;\nfunction aggregateCitationMetadataForCandidate(candidateChunk, aggregatedCandidate) {\n    var _a;\n    if (!candidateChunk.citationMetadata) {\n        return;\n    }\n    const emptyCitationMetadata = {\n        citations: [],\n    };\n    const citationMetadataAggregated = (_a = aggregatedCandidate.citationMetadata) !== null && _a !== void 0 ? _a : emptyCitationMetadata;\n    const citationMetadataChunk = candidateChunk.citationMetadata;\n    if (citationMetadataChunk.citations) {\n        citationMetadataAggregated.citations =\n            citationMetadataAggregated.citations.concat(citationMetadataChunk.citations);\n    }\n    return citationMetadataAggregated;\n}\nfunction aggregateGroundingMetadataForCandidate(candidateChunk, aggregatedCandidate) {\n    var _a;\n    if (!candidateChunk.groundingMetadata) {\n        return;\n    }\n    const emptyGroundingMetadata = {\n        webSearchQueries: [],\n        retrievalQueries: [],\n        groundingChunks: [],\n        groundingSupports: [],\n    };\n    const groundingMetadataAggregated = (_a = aggregatedCandidate.groundingMetadata) !== null && _a !== void 0 ? _a : emptyGroundingMetadata;\n    const groundingMetadataChunk = candidateChunk.groundingMetadata;\n    if (groundingMetadataChunk.webSearchQueries) {\n        groundingMetadataAggregated.webSearchQueries =\n            groundingMetadataAggregated.webSearchQueries.concat(groundingMetadataChunk.webSearchQueries);\n    }\n    if (groundingMetadataChunk.retrievalQueries) {\n        groundingMetadataAggregated.retrievalQueries =\n            groundingMetadataAggregated.retrievalQueries.concat(groundingMetadataChunk.retrievalQueries);\n    }\n    if (groundingMetadataChunk.groundingChunks) {\n        groundingMetadataAggregated.groundingChunks =\n            groundingMetadataAggregated.groundingChunks.concat(groundingMetadataChunk.groundingChunks);\n    }\n    if (groundingMetadataChunk.groundingSupports) {\n        groundingMetadataAggregated.groundingSupports =\n            groundingMetadataAggregated.groundingSupports.concat(groundingMetadataChunk.groundingSupports);\n    }\n    if (groundingMetadataChunk.searchEntryPoint) {\n        groundingMetadataAggregated.searchEntryPoint =\n            groundingMetadataChunk.searchEntryPoint;\n    }\n    return groundingMetadataAggregated;\n}\nfunction addMissingIndexAndRole(response) {\n    const generateContentResponse = response;\n    if (generateContentResponse.candidates &&\n        generateContentResponse.candidates.length > 0) {\n        generateContentResponse.candidates.forEach((candidate, index) => {\n            if (candidate.index === undefined) {\n                generateContentResponse.candidates[index].index = index;\n            }\n            if (candidate.content === undefined) {\n                generateContentResponse.candidates[index].content = {};\n            }\n            if (candidate.content.role === undefined) {\n                generateContentResponse.candidates[index].content.role =\n                    util_1.constants.MODEL_ROLE;\n            }\n        });\n    }\n    return generateContentResponse;\n}\n/**\n * Process model responses from generateContent\n * @ignore\n */\nasync function processUnary(response) {\n    if (response !== undefined) {\n        // ts-ignore\n        const responseJson = await response.json();\n        const generateContentResponse = addMissingIndexAndRole(responseJson);\n        return Promise.resolve({\n            response: generateContentResponse,\n        });\n    }\n    return Promise.resolve({\n        response: {},\n    });\n}\nexports.processUnary = processUnary;\n/**\n * Process model responses from countTokens\n * @ignore\n */\nasync function processCountTokenResponse(response) {\n    if (response) {\n        // ts-ignore\n        return response.json();\n    }\n    return Promise.resolve({});\n}\nexports.processCountTokenResponse = processCountTokenResponse;\n//# sourceMappingURL=post_fetch_processing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.postRequest = void 0;\nconst API_BASE_PATH = 'aiplatform.googleapis.com';\nconst GOOGLE_INTERNAL_ENDPOINT = 'googleapis.com';\nconst AUTHORIZATION_HEADER = 'Authorization';\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\nconst X_GOOG_API_CLIENT_HEADER = 'X-Goog-Api-Client';\nconst SERVER_RESERVED_HEADERS = [AUTHORIZATION_HEADER, CONTENT_TYPE_HEADER];\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst constants = __webpack_require__(/*! ../util/constants */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\n/**\n * Makes a POST request to a Vertex service\n * @ignore\n */\nasync function postRequest({ region, resourcePath, resourceMethod, token, data, apiEndpoint, requestOptions, apiVersion = 'v1', }) {\n    const vertexBaseEndpoint = apiEndpoint !== null && apiEndpoint !== void 0 ? apiEndpoint : `${region}-${API_BASE_PATH}`;\n    let vertexEndpoint = `https://${vertexBaseEndpoint}/${apiVersion}/${resourcePath}:${resourceMethod}`;\n    // Use server sent events for streamGenerateContent\n    if (resourceMethod === constants.STREAMING_GENERATE_CONTENT_METHOD) {\n        vertexEndpoint += '?alt=sse';\n    }\n    const necessaryHeaders = new Headers({\n        [AUTHORIZATION_HEADER]: `Bearer ${token}`,\n        [CONTENT_TYPE_HEADER]: 'application/json',\n        [USER_AGENT_HEADER]: constants.USER_AGENT,\n    });\n    const totalHeaders = getExtraHeaders(vertexBaseEndpoint, necessaryHeaders, requestOptions);\n    return fetch(vertexEndpoint, {\n        ...getFetchOptions(requestOptions),\n        method: 'POST',\n        headers: totalHeaders,\n        body: JSON.stringify(data),\n    });\n}\nexports.postRequest = postRequest;\nfunction getFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if (!requestOptions ||\n        requestOptions.timeout === undefined ||\n        requestOptions.timeout < 0) {\n        return fetchOptions;\n    }\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setTimeout(() => abortController.abort(), requestOptions.timeout);\n    fetchOptions.signal = signal;\n    return fetchOptions;\n}\nfunction stringHasLineBreak(header) {\n    if (header === null || header === undefined) {\n        return false;\n    }\n    return header.includes('\\n') || header.includes('\\r');\n}\nfunction headersHasLineBreak(customHeaders) {\n    if (!customHeaders) {\n        return false;\n    }\n    for (const [key, value] of customHeaders.entries()) {\n        if (stringHasLineBreak(key) || stringHasLineBreak(value)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getExtraHeaders(vertexBaseEndpoint, necessaryHeaders, requestOptions) {\n    var _a;\n    if (stringHasLineBreak(requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient)) {\n        throw new errors_1.ClientError('Found line break in apiClient request option field, please remove ' +\n            'the line break and try again.');\n    }\n    if (headersHasLineBreak(requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.customHeaders)) {\n        throw new errors_1.ClientError('Found line break in customerHeaders request option field, please remove ' +\n            'the line break and try again.');\n    }\n    const totalHeaders = new Headers(necessaryHeaders);\n    const customHeaders = (_a = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.customHeaders) !== null && _a !== void 0 ? _a : new Headers();\n    for (const [key, val] of customHeaders.entries()) {\n        totalHeaders.append(key, val);\n    }\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        totalHeaders.append(X_GOOG_API_CLIENT_HEADER, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient);\n    }\n    // Resolve header conflicts.\n    let goldenHeaders;\n    if (vertexBaseEndpoint.endsWith(GOOGLE_INTERNAL_ENDPOINT)) {\n        goldenHeaders = necessaryHeaders;\n    }\n    else {\n        goldenHeaders = customHeaders;\n    }\n    for (const header of SERVER_RESERVED_HEADERS) {\n        if (goldenHeaders.has(header)) {\n            totalHeaders.set(header, goldenHeaders.get(header));\n        }\n    }\n    return totalHeaders;\n}\n//# sourceMappingURL=post_request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasVertexAISearch = exports.hasVertexRagStore = exports.getApiVersion = exports.validateGenerationConfig = exports.validateGenerateContentRequest = exports.formatContentRequest = void 0;\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst constants = __webpack_require__(/*! ../util/constants */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\nfunction formatContentRequest(request, generationConfig, safetySettings) {\n    if (typeof request === 'string') {\n        return {\n            contents: [{ role: constants.USER_ROLE, parts: [{ text: request }] }],\n            generationConfig: generationConfig,\n            safetySettings: safetySettings,\n        };\n    }\n    else {\n        return request;\n    }\n}\nexports.formatContentRequest = formatContentRequest;\nfunction validateGenerateContentRequest(request) {\n    if (hasVertexAISearch(request) && hasVertexRagStore(request)) {\n        throw new errors_1.ClientError('Found both vertexAiSearch and vertexRagStore field are set in tool. Either set vertexAiSearch or vertexRagStore.');\n    }\n}\nexports.validateGenerateContentRequest = validateGenerateContentRequest;\nfunction validateGenerationConfig(generationConfig) {\n    if ('topK' in generationConfig) {\n        if (!(generationConfig.topK > 0) || !(generationConfig.topK <= 40)) {\n            delete generationConfig.topK;\n        }\n    }\n    return generationConfig;\n}\nexports.validateGenerationConfig = validateGenerationConfig;\nfunction getApiVersion(request) {\n    return hasVertexRagStore(request) || hasCachedContent(request)\n        ? 'v1beta1'\n        : 'v1';\n}\nexports.getApiVersion = getApiVersion;\nfunction hasVertexRagStore(request) {\n    var _a;\n    for (const tool of (_a = request === null || request === void 0 ? void 0 : request.tools) !== null && _a !== void 0 ? _a : []) {\n        const retrieval = tool.retrieval;\n        if (!retrieval)\n            continue;\n        if (retrieval.vertexRagStore) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hasVertexRagStore = hasVertexRagStore;\nfunction hasCachedContent(request) {\n    return !!request.cachedContent;\n}\nfunction hasVertexAISearch(request) {\n    var _a;\n    for (const tool of (_a = request === null || request === void 0 ? void 0 : request.tools) !== null && _a !== void 0 ? _a : []) {\n        const retrieval = tool.retrieval;\n        if (!retrieval)\n            continue;\n        if (retrieval.vertexAiSearch) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hasVertexAISearch = hasVertexAISearch;\n//# sourceMappingURL=pre_fetch_processing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9mdW5jdGlvbnMvcHJlX2ZldGNoX3Byb2Nlc3NpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyx5QkFBeUIsR0FBRyxxQkFBcUIsR0FBRyxnQ0FBZ0MsR0FBRyxzQ0FBc0MsR0FBRyw0QkFBNEI7QUFDeEwsaUJBQWlCLG1CQUFPLENBQUMseUdBQWlCO0FBQzFDLGtCQUFrQixtQkFBTyxDQUFDLDZHQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSx5QkFBeUIscUNBQXFDLGVBQWUsR0FBRztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9mdW5jdGlvbnMvcHJlX2ZldGNoX3Byb2Nlc3NpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNWZXJ0ZXhBSVNlYXJjaCA9IGV4cG9ydHMuaGFzVmVydGV4UmFnU3RvcmUgPSBleHBvcnRzLmdldEFwaVZlcnNpb24gPSBleHBvcnRzLnZhbGlkYXRlR2VuZXJhdGlvbkNvbmZpZyA9IGV4cG9ydHMudmFsaWRhdGVHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0ID0gZXhwb3J0cy5mb3JtYXRDb250ZW50UmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL3R5cGVzL2Vycm9yc1wiKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi91dGlsL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIGZvcm1hdENvbnRlbnRSZXF1ZXN0KHJlcXVlc3QsIGdlbmVyYXRpb25Db25maWcsIHNhZmV0eVNldHRpbmdzKSB7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGVudHM6IFt7IHJvbGU6IGNvbnN0YW50cy5VU0VSX1JPTEUsIHBhcnRzOiBbeyB0ZXh0OiByZXF1ZXN0IH1dIH1dLFxuICAgICAgICAgICAgZ2VuZXJhdGlvbkNvbmZpZzogZ2VuZXJhdGlvbkNvbmZpZyxcbiAgICAgICAgICAgIHNhZmV0eVNldHRpbmdzOiBzYWZldHlTZXR0aW5ncyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbn1cbmV4cG9ydHMuZm9ybWF0Q29udGVudFJlcXVlc3QgPSBmb3JtYXRDb250ZW50UmVxdWVzdDtcbmZ1bmN0aW9uIHZhbGlkYXRlR2VuZXJhdGVDb250ZW50UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgaWYgKGhhc1ZlcnRleEFJU2VhcmNoKHJlcXVlc3QpICYmIGhhc1ZlcnRleFJhZ1N0b3JlKHJlcXVlc3QpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5DbGllbnRFcnJvcignRm91bmQgYm90aCB2ZXJ0ZXhBaVNlYXJjaCBhbmQgdmVydGV4UmFnU3RvcmUgZmllbGQgYXJlIHNldCBpbiB0b29sLiBFaXRoZXIgc2V0IHZlcnRleEFpU2VhcmNoIG9yIHZlcnRleFJhZ1N0b3JlLicpO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0ID0gdmFsaWRhdGVHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0O1xuZnVuY3Rpb24gdmFsaWRhdGVHZW5lcmF0aW9uQ29uZmlnKGdlbmVyYXRpb25Db25maWcpIHtcbiAgICBpZiAoJ3RvcEsnIGluIGdlbmVyYXRpb25Db25maWcpIHtcbiAgICAgICAgaWYgKCEoZ2VuZXJhdGlvbkNvbmZpZy50b3BLID4gMCkgfHwgIShnZW5lcmF0aW9uQ29uZmlnLnRvcEsgPD0gNDApKSB7XG4gICAgICAgICAgICBkZWxldGUgZ2VuZXJhdGlvbkNvbmZpZy50b3BLO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBnZW5lcmF0aW9uQ29uZmlnO1xufVxuZXhwb3J0cy52YWxpZGF0ZUdlbmVyYXRpb25Db25maWcgPSB2YWxpZGF0ZUdlbmVyYXRpb25Db25maWc7XG5mdW5jdGlvbiBnZXRBcGlWZXJzaW9uKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gaGFzVmVydGV4UmFnU3RvcmUocmVxdWVzdCkgfHwgaGFzQ2FjaGVkQ29udGVudChyZXF1ZXN0KVxuICAgICAgICA/ICd2MWJldGExJ1xuICAgICAgICA6ICd2MSc7XG59XG5leHBvcnRzLmdldEFwaVZlcnNpb24gPSBnZXRBcGlWZXJzaW9uO1xuZnVuY3Rpb24gaGFzVmVydGV4UmFnU3RvcmUocmVxdWVzdCkge1xuICAgIHZhciBfYTtcbiAgICBmb3IgKGNvbnN0IHRvb2wgb2YgKF9hID0gcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnRvb2xzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICBjb25zdCByZXRyaWV2YWwgPSB0b29sLnJldHJpZXZhbDtcbiAgICAgICAgaWYgKCFyZXRyaWV2YWwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHJldHJpZXZhbC52ZXJ0ZXhSYWdTdG9yZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5oYXNWZXJ0ZXhSYWdTdG9yZSA9IGhhc1ZlcnRleFJhZ1N0b3JlO1xuZnVuY3Rpb24gaGFzQ2FjaGVkQ29udGVudChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuICEhcmVxdWVzdC5jYWNoZWRDb250ZW50O1xufVxuZnVuY3Rpb24gaGFzVmVydGV4QUlTZWFyY2gocmVxdWVzdCkge1xuICAgIHZhciBfYTtcbiAgICBmb3IgKGNvbnN0IHRvb2wgb2YgKF9hID0gcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnRvb2xzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICBjb25zdCByZXRyaWV2YWwgPSB0b29sLnJldHJpZXZhbDtcbiAgICAgICAgaWYgKCFyZXRyaWV2YWwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHJldHJpZXZhbC52ZXJ0ZXhBaVNlYXJjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5oYXNWZXJ0ZXhBSVNlYXJjaCA9IGhhc1ZlcnRleEFJU2VhcmNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlX2ZldGNoX3Byb2Nlc3NpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/util.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/util.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formulateSystemInstructionIntoContent = void 0;\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\nfunction formulateSystemInstructionIntoContent(systemInstruction) {\n    if (typeof systemInstruction === 'string') {\n        return {\n            role: util_1.constants.SYSTEM_ROLE,\n            parts: [{ text: systemInstruction }],\n        };\n    }\n    systemInstruction.role = util_1.constants.SYSTEM_ROLE;\n    return systemInstruction;\n}\nexports.formulateSystemInstructionIntoContent = formulateSystemInstructionIntoContent;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9mdW5jdGlvbnMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZDQUE2QztBQUM3QyxlQUFlLG1CQUFPLENBQUMsK0ZBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IseUJBQXlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9mdW5jdGlvbnMvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm11bGF0ZVN5c3RlbUluc3RydWN0aW9uSW50b0NvbnRlbnQgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmZ1bmN0aW9uIGZvcm11bGF0ZVN5c3RlbUluc3RydWN0aW9uSW50b0NvbnRlbnQoc3lzdGVtSW5zdHJ1Y3Rpb24pIHtcbiAgICBpZiAodHlwZW9mIHN5c3RlbUluc3RydWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm9sZTogdXRpbF8xLmNvbnN0YW50cy5TWVNURU1fUk9MRSxcbiAgICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBzeXN0ZW1JbnN0cnVjdGlvbiB9XSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3lzdGVtSW5zdHJ1Y3Rpb24ucm9sZSA9IHV0aWxfMS5jb25zdGFudHMuU1lTVEVNX1JPTEU7XG4gICAgcmV0dXJuIHN5c3RlbUluc3RydWN0aW9uO1xufVxuZXhwb3J0cy5mb3JtdWxhdGVTeXN0ZW1JbnN0cnVjdGlvbkludG9Db250ZW50ID0gZm9ybXVsYXRlU3lzdGVtSW5zdHJ1Y3Rpb25JbnRvQ29udGVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/util.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VertexAI = void 0;\nvar vertex_ai_1 = __webpack_require__(/*! ./vertex_ai */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js\");\nObject.defineProperty(exports, \"VertexAI\", ({ enumerable: true, get: function () { return vertex_ai_1.VertexAI; } }));\n__exportStar(__webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./models */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQixrQkFBa0IsbUJBQU8sQ0FBQyxrR0FBYTtBQUN2Qyw0Q0FBMkMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDbkgsYUFBYSxtQkFBTyxDQUFDLGdHQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxrR0FBVTtBQUMvQiIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvdmVydGV4YWkvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZXJ0ZXhBSSA9IHZvaWQgMDtcbnZhciB2ZXJ0ZXhfYWlfMSA9IHJlcXVpcmUoXCIuL3ZlcnRleF9haVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZlcnRleEFJXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2ZXJ0ZXhfYWlfMS5WZXJ0ZXhBSTsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbW9kZWxzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatSessionPreview = exports.ChatSession = void 0;\nconst util_1 = __webpack_require__(/*! ../functions/util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/util.js\");\nconst generate_content_1 = __webpack_require__(/*! ../functions/generate_content */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js\");\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst util_2 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\n/**\n * The `ChatSession` class is used to make multiturn send message requests. You\n * can instantiate this class by using the `startChat` method in the\n * `GenerativeModel` class. The `sendMessage` method makes an async call to get\n * the response of a chat message at at once. The `sendMessageStream` method\n * makes an async call to stream the response of a chat message as it's being\n * generated.\n */\nclass ChatSession {\n    async getHistory() {\n        return Promise.resolve(this.historyInternal);\n    }\n    /**\n     * @constructor\n     * @param request - {@link StartChatSessionRequest}\n     */\n    constructor(request, requestOptions) {\n        var _a;\n        this.sendStreamPromise = Promise.resolve();\n        this.project = request.project;\n        this.location = request.location;\n        this.googleAuth = request.googleAuth;\n        this.resourcePath = request.resourcePath;\n        this.historyInternal = (_a = request.history) !== null && _a !== void 0 ? _a : [];\n        this.generationConfig = request.generationConfig;\n        this.safetySettings = request.safetySettings;\n        this.tools = request.tools;\n        this.toolConfig = request.toolConfig;\n        this.apiEndpoint = request.apiEndpoint;\n        this.requestOptions = requestOptions !== null && requestOptions !== void 0 ? requestOptions : {};\n        if (request.systemInstruction) {\n            this.systemInstruction = (0, util_1.formulateSystemInstructionIntoContent)(request.systemInstruction);\n        }\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_2.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to send chat message.\n     *\n     * The response is returned in {@link\n     * GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * console.log('Response: ', JSON.stringify(result1.response));\n     *\n     * const result2 = await chat.sendMessage(\"What about python?\");\n     * console.log('Response: ', JSON.stringify(result2.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link GenerateContentResult}.\n     */\n    async sendMessage(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentRequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n        };\n        const generateContentResult = await (0, generate_content_1.generateContent)(this.location, this.resourcePath, this.fetchToken(), generateContentRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions).catch(e => {\n            throw e;\n        });\n        const generateContentResponse = await generateContentResult.response;\n        // Only push the latest message to history if the response returns a result\n        if (generateContentResponse.candidates &&\n            generateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromModel = generateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromModel);\n        }\n        return Promise.resolve(generateContentResult);\n    }\n    async appendHistory(streamGenerateContentResultPromise, newContent) {\n        const streamGenerateContentResult = await streamGenerateContentResultPromise;\n        const streamGenerateContentResponse = await streamGenerateContentResult.response;\n        // Only push the latest message to history if the response returned a result\n        if (streamGenerateContentResponse.candidates &&\n            streamGenerateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromModel = streamGenerateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromModel);\n        }\n    }\n    /**\n     * Makes an async call to stream send message.\n     *\n     * The response is streamed chunk by chunk in\n     * {@link StreamGenerateContentResult.stream}. The aggregated response is\n     * avaliable in {@link StreamGenerateContentResult.response} after all chunks\n     * are returned.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const chatInput = \"How can I learn more about Node.js?\";\n     * const result = await chat.sendMessageStream(chatInput);\n     * for await (const item of result.stream) {\n     *   console.log(item.candidates[0].content.parts[0].text);\n     * }\n     * const response = await result.response;\n     * console.log('aggregated response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link StreamGenerateContentResult}.\n     */\n    async sendMessageStream(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentrequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n        };\n        const streamGenerateContentResultPromise = (0, generate_content_1.generateContentStream)(this.location, this.resourcePath, this.fetchToken(), generateContentrequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions).catch(e => {\n            throw e;\n        });\n        this.sendStreamPromise = this.appendHistory(streamGenerateContentResultPromise, newContent).catch(e => {\n            // Errors from remote endpoint will be catchable by user from streamGenerateContentResultPromise\n            // Errors in appendHistory should not throw to cause user's programe exit with code 1\n            console.error(e);\n        });\n        return streamGenerateContentResultPromise;\n    }\n}\nexports.ChatSession = ChatSession;\n/**\n * The `ChatSessionPreview` class is used to make multiturn send message requests. You\n * can instantiate this class by using the `startChat` method in the\n * `GenerativeModelPreview` class. The `sendMessage` method makes an async call to get\n * the response of a chat message at at once. The `sendMessageStream` method\n * makes an async call to stream the response of a chat message as it's being\n * generated.\n */\nclass ChatSessionPreview {\n    async getHistory() {\n        return Promise.resolve(this.historyInternal);\n    }\n    /**\n     * @constructor\n     * @param request - {@link StartChatSessionRequest}\n     */\n    constructor(request, requestOptions) {\n        var _a;\n        this.sendStreamPromise = Promise.resolve();\n        this.project = request.project;\n        this.location = request.location;\n        this.googleAuth = request.googleAuth;\n        this.resourcePath = request.resourcePath;\n        this.historyInternal = (_a = request.history) !== null && _a !== void 0 ? _a : [];\n        this.generationConfig = request.generationConfig;\n        this.safetySettings = request.safetySettings;\n        this.tools = request.tools;\n        this.toolConfig = request.toolConfig;\n        this.apiEndpoint = request.apiEndpoint;\n        this.requestOptions = requestOptions !== null && requestOptions !== void 0 ? requestOptions : {};\n        this.cachedContent = request.cachedContent;\n        if (request.systemInstruction) {\n            this.systemInstruction = (0, util_1.formulateSystemInstructionIntoContent)(request.systemInstruction);\n        }\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws GoogleAuthError when fails.\n     * @returns Promise of token.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_2.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to send chat message.\n     *\n     * The response is returned in {@link\n     * GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModelPreview.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * console.log('Response: ', JSON.stringify(result1.response));\n     *\n     * const result2 = await chat.sendMessage(\"What about python?\");\n     * console.log('Response: ', JSON.stringify(result2.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link GenerateContentResult}.\n     */\n    async sendMessage(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentRequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n            cachedContent: this.cachedContent,\n        };\n        const generateContentResult = await (0, generate_content_1.generateContent)(this.location, this.resourcePath, this.fetchToken(), generateContentRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions).catch(e => {\n            throw e;\n        });\n        const generateContentResponse = await generateContentResult.response;\n        // Only push the latest message to history if the response returned a result\n        if (generateContentResponse.candidates &&\n            generateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromAssistant = generateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromAssistant);\n        }\n        return Promise.resolve(generateContentResult);\n    }\n    async appendHistory(streamGenerateContentResultPromise, newContent) {\n        const streamGenerateContentResult = await streamGenerateContentResultPromise;\n        const streamGenerateContentResponse = await streamGenerateContentResult.response;\n        // Only push the latest message to history if the response returned a result\n        if (streamGenerateContentResponse.candidates &&\n            streamGenerateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromAssistant = streamGenerateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromAssistant);\n        }\n    }\n    /**\n     * Makes an async call to stream send message.\n     *\n     * The response is streamed chunk by chunk in\n     * {@link StreamGenerateContentResult.stream}. The aggregated response is\n     * avaliable in {@link StreamGenerateContentResult.response} after all chunks\n     * are returned.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const chatInput = \"How can I learn more about Node.js?\";\n     * const result = await chat.sendMessageStream(chatInput);\n     * for await (const item of result.stream) {\n     *   console.log(item.candidates[0].content.parts[0].text);\n     * }\n     * const response = await result.response;\n     * console.log('aggregated response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link StreamGenerateContentResult}.\n     */\n    async sendMessageStream(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentRequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n            cachedContent: this.cachedContent,\n        };\n        const streamGenerateContentResultPromise = (0, generate_content_1.generateContentStream)(this.location, this.resourcePath, this.fetchToken(), generateContentRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions).catch(e => {\n            throw e;\n        });\n        this.sendStreamPromise = this.appendHistory(streamGenerateContentResultPromise, newContent).catch(e => {\n            // Errors from remote endpoint will be catchable by user from streamGenerateContentResultPromise\n            // Errors in appendHistory should not throw to cause user's programe exit with code 1\n            console.error(e);\n        });\n        return streamGenerateContentResultPromise;\n    }\n}\nexports.ChatSessionPreview = ChatSessionPreview;\nfunction formulateNewContentFromSendMessageRequest(request) {\n    let newParts = [];\n    if (typeof request === 'string') {\n        newParts = [{ text: request }];\n    }\n    else if (Array.isArray(request)) {\n        for (const item of request) {\n            if (typeof item === 'string') {\n                newParts.push({ text: item });\n            }\n            else {\n                newParts.push(item);\n            }\n        }\n    }\n    return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @ignore\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = { role: util_2.constants.USER_ROLE, parts: [] };\n    const functionContent = { role: util_2.constants.USER_ROLE, parts: [] };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts) {\n        if ('functionResponse' in part) {\n            functionContent.parts.push(part);\n            hasFunctionContent = true;\n        }\n        else {\n            userContent.parts.push(part);\n            hasUserContent = true;\n        }\n    }\n    if (hasUserContent && hasFunctionContent) {\n        throw new errors_1.ClientError('Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.');\n    }\n    if (!hasUserContent && !hasFunctionContent) {\n        throw new errors_1.ClientError('No content is provided for sending chat message.');\n    }\n    if (hasUserContent) {\n        return [userContent];\n    }\n    return [functionContent];\n}\n//# sourceMappingURL=chat_session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerativeModelPreview = exports.GenerativeModel = void 0;\nconst util_1 = __webpack_require__(/*! ../functions/util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/util.js\");\nconst count_tokens_1 = __webpack_require__(/*! ../functions/count_tokens */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js\");\nconst generate_content_1 = __webpack_require__(/*! ../functions/generate_content */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js\");\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst util_2 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\nconst chat_session_1 = __webpack_require__(/*! ./chat_session */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js\");\n/**\n * The `GenerativeModel` class is the base class for the generative models on\n * Vertex AI.\n * NOTE: Don't instantiate this class directly. Use\n * `vertexai.getGenerativeModel()` instead.\n */\nclass GenerativeModel {\n    /**\n     * @constructor\n     * @param getGenerativeModelParams - {@link GetGenerativeModelParams}\n     */\n    constructor(getGenerativeModelParams) {\n        var _a;\n        this.project = getGenerativeModelParams.project;\n        this.location = getGenerativeModelParams.location;\n        this.apiEndpoint = getGenerativeModelParams.apiEndpoint;\n        this.googleAuth = getGenerativeModelParams.googleAuth;\n        this.model = getGenerativeModelParams.model;\n        this.generationConfig = getGenerativeModelParams.generationConfig;\n        this.safetySettings = getGenerativeModelParams.safetySettings;\n        this.tools = getGenerativeModelParams.tools;\n        this.toolConfig = getGenerativeModelParams.toolConfig;\n        this.requestOptions = (_a = getGenerativeModelParams.requestOptions) !== null && _a !== void 0 ? _a : {};\n        if (getGenerativeModelParams.systemInstruction) {\n            this.systemInstruction = (0, util_1.formulateSystemInstructionIntoContent)(getGenerativeModelParams.systemInstruction);\n        }\n        this.resourcePath = formulateResourcePathFromModel(this.model, this.project, this.location);\n        // publisherModelEndpoint is deprecated\n        this.publisherModelEndpoint = this.resourcePath;\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token string.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_2.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to generate content.\n     *\n     * The response will be returned in {@link\n     * GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const result = await generativeModel.generateContent(request);\n     * console.log('Response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - A GenerateContentRequest object with the request contents.\n     * @returns The GenerateContentResponse object with the response candidates.\n     */\n    async generateContent(request) {\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction);\n        return (0, generate_content_1.generateContent)(this.location, this.resourcePath, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions);\n    }\n    /**\n     * Makes an async stream request to generate content.\n     *\n     * The response is returned chunk by chunk as it's being generated in {@link\n     * StreamGenerateContentResult.stream}. After all chunks of the response are\n     * returned, the aggregated response is available in\n     * {@link StreamGenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const streamingResult = await generativeModel.generateContentStream(request);\n     * for await (const item of streamingResult.stream) {\n     *   console.log('stream chunk: ', JSON.stringify(item));\n     * }\n     * const aggregatedResponse = await streamingResult.response;\n     * console.log('aggregated response: ', JSON.stringify(aggregatedResponse));\n     * ```\n     *\n     * @param request - {@link GenerateContentRequest}\n     * @returns Promise of {@link StreamGenerateContentResult}\n     */\n    async generateContentStream(request) {\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction);\n        return (0, generate_content_1.generateContentStream)(this.location, this.resourcePath, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions);\n    }\n    /**\n     * Makes an async request to count tokens.\n     *\n     * The `countTokens` function returns the token count and the number of\n     * billable characters for a prompt.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const resp = await generativeModel.countTokens(request);\n     * console.log('count tokens response: ', resp);\n     * ```\n     *\n     * @param request - A CountTokensRequest object with the request contents.\n     * @returns The CountTokensResponse object with the token count.\n     */\n    async countTokens(request) {\n        return (0, count_tokens_1.countTokens)(this.location, this.resourcePath, this.fetchToken(), request, this.apiEndpoint, this.requestOptions);\n    }\n    /**\n     * Instantiates a {@link ChatSession}.\n     *\n     * The {@link ChatSession} class is a stateful class that holds the state of\n     * the conversation with the model and provides methods to interact with the\n     * model in chat mode. Calling this method doesn't make any calls to a remote\n     * endpoint. To make remote call, use {@link ChatSession.sendMessage} or\n     * @link ChatSession.sendMessageStream}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * const response1 = await result1.response;\n     * console.log('Response: ', JSON.stringify(response1));\n     *\n     * const result2 = await chat.sendMessageStream(\"What about python?\");\n     * const response2 = await result2.response;\n     * console.log('Response: ', JSON.stringify(await response2));\n     * ```\n     *\n     * @param request - {@link StartChatParams}\n     * @returns {@link ChatSession}\n     */\n    startChat(request) {\n        var _a, _b, _c, _d, _e, _f;\n        const startChatRequest = {\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            publisherModelEndpoint: this.publisherModelEndpoint,\n            resourcePath: this.resourcePath,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n        };\n        if (request) {\n            startChatRequest.history = request.history;\n            startChatRequest.generationConfig =\n                (_a = request.generationConfig) !== null && _a !== void 0 ? _a : this.generationConfig;\n            startChatRequest.safetySettings =\n                (_b = request.safetySettings) !== null && _b !== void 0 ? _b : this.safetySettings;\n            startChatRequest.tools = (_c = request.tools) !== null && _c !== void 0 ? _c : this.tools;\n            startChatRequest.toolConfig = (_d = request.toolConfig) !== null && _d !== void 0 ? _d : this.toolConfig;\n            startChatRequest.apiEndpoint = (_e = request.apiEndpoint) !== null && _e !== void 0 ? _e : this.apiEndpoint;\n            startChatRequest.systemInstruction =\n                (_f = request.systemInstruction) !== null && _f !== void 0 ? _f : this.systemInstruction;\n        }\n        return new chat_session_1.ChatSession(startChatRequest, this.requestOptions);\n    }\n}\nexports.GenerativeModel = GenerativeModel;\n/**\n * The `GenerativeModelPreview` class is the base class for the generative models\n * that are in preview.\n * NOTE: Don't instantiate this class directly. Use\n * `vertexai.preview.getGenerativeModel()` instead.\n */\nclass GenerativeModelPreview {\n    /**\n     * @constructor\n     * @param getGenerativeModelParams - {@link GetGenerativeModelParams}\n     */\n    constructor(getGenerativeModelParams) {\n        var _a;\n        this.project = getGenerativeModelParams.project;\n        this.location = getGenerativeModelParams.location;\n        this.apiEndpoint = getGenerativeModelParams.apiEndpoint;\n        this.googleAuth = getGenerativeModelParams.googleAuth;\n        this.model = getGenerativeModelParams.model;\n        this.generationConfig = getGenerativeModelParams.generationConfig;\n        this.safetySettings = getGenerativeModelParams.safetySettings;\n        this.tools = getGenerativeModelParams.tools;\n        this.toolConfig = getGenerativeModelParams.toolConfig;\n        this.cachedContent = getGenerativeModelParams.cachedContent;\n        this.requestOptions = (_a = getGenerativeModelParams.requestOptions) !== null && _a !== void 0 ? _a : {};\n        if (getGenerativeModelParams.systemInstruction) {\n            this.systemInstruction = (0, util_1.formulateSystemInstructionIntoContent)(getGenerativeModelParams.systemInstruction);\n        }\n        this.resourcePath = formulateResourcePathFromModel(this.model, this.project, this.location);\n        // publisherModelEndpoint is deprecated\n        this.publisherModelEndpoint = this.resourcePath;\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token string.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_2.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to generate content.\n     *\n     * The response will be returned in {@link GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const result = await generativeModelPreview.generateContent(request);\n     * console.log('Response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - A GenerateContentRequest object with the request contents.\n     * @returns The GenerateContentResponse object with the response candidates.\n     */\n    async generateContent(request) {\n        var _a;\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = {\n            ...formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction),\n            cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name,\n        };\n        return (0, generate_content_1.generateContent)(this.location, this.resourcePath, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions);\n    }\n    /**\n     * Makes an async stream request to generate content.\n     *\n     * The response is returned chunk by chunk as it's being generated in {@link\n     * StreamGenerateContentResult.stream}. After all chunks of the response are\n     * returned, the aggregated response is available in\n     * {@link StreamGenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const streamingResult = await generativeModelPreview.generateContentStream(request);\n     * for await (const item of streamingResult.stream) {\n     *   console.log('stream chunk: ', JSON.stringify(item));\n     * }\n     * const aggregatedResponse = await streamingResult.response;\n     * console.log('aggregated response: ', JSON.stringify(aggregatedResponse));\n     * ```\n     *\n     * @param request - {@link GenerateContentRequest}\n     * @returns Promise of {@link StreamGenerateContentResult}\n     */\n    async generateContentStream(request) {\n        var _a;\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = {\n            ...formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction),\n            cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name,\n        };\n        return (0, generate_content_1.generateContentStream)(this.location, this.resourcePath, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.toolConfig, this.requestOptions);\n    }\n    /**\n     * Makes an async request to count tokens.\n     *\n     * The `countTokens` function returns the token count and the number of\n     * billable characters for a prompt.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const resp = await generativeModelPreview.countTokens(request);\n     * console.log('count tokens response: ', resp);\n     * ```\n     *\n     * @param request - A CountTokensRequest object with the request contents.\n     * @returns The CountTokensResponse object with the token count.\n     */\n    async countTokens(request) {\n        return (0, count_tokens_1.countTokens)(this.location, this.resourcePath, this.fetchToken(), request, this.apiEndpoint, this.requestOptions);\n    }\n    /**\n     * Instantiates a {@link ChatSessionPreview}.\n     *\n     * The {@link ChatSessionPreview} class is a stateful class that holds the state of\n     * the conversation with the model and provides methods to interact with the\n     * model in chat mode. Calling this method doesn't make any calls to a remote\n     * endpoint. To make remote call, use {@link ChatSessionPreview.sendMessage} or\n     * {@link ChatSessionPreview.sendMessageStream}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModelPreview.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * const response1 = await result1.response;\n     * console.log('Response: ', JSON.stringify(response1));\n     *\n     * const result2 = await chat.sendMessageStream(\"What about python?\");\n     * const response2 = await result2.response;\n     * console.log('Response: ', JSON.stringify(await response2));\n     * ```\n     *\n     * @param request - {@link StartChatParams}\n     * @returns {@link ChatSessionPreview}\n     */\n    startChat(request) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const startChatRequest = {\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            publisherModelEndpoint: this.publisherModelEndpoint,\n            resourcePath: this.resourcePath,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n            cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name,\n        };\n        if (request) {\n            startChatRequest.history = request.history;\n            startChatRequest.generationConfig =\n                (_b = request.generationConfig) !== null && _b !== void 0 ? _b : this.generationConfig;\n            startChatRequest.safetySettings =\n                (_c = request.safetySettings) !== null && _c !== void 0 ? _c : this.safetySettings;\n            startChatRequest.tools = (_d = request.tools) !== null && _d !== void 0 ? _d : this.tools;\n            startChatRequest.toolConfig = (_e = request.toolConfig) !== null && _e !== void 0 ? _e : this.toolConfig;\n            startChatRequest.systemInstruction =\n                (_f = request.systemInstruction) !== null && _f !== void 0 ? _f : this.systemInstruction;\n            startChatRequest.cachedContent =\n                (_g = request.cachedContent) !== null && _g !== void 0 ? _g : (_h = this.cachedContent) === null || _h === void 0 ? void 0 : _h.name;\n        }\n        return new chat_session_1.ChatSessionPreview(startChatRequest, this.requestOptions);\n    }\n    getModelName() {\n        return this.model;\n    }\n    getCachedContent() {\n        return this.cachedContent;\n    }\n    getSystemInstruction() {\n        return this.systemInstruction;\n    }\n}\nexports.GenerativeModelPreview = GenerativeModelPreview;\nfunction formulateResourcePathFromModel(model, project, location) {\n    let resourcePath;\n    if (!model) {\n        throw new errors_1.ClientError('model parameter must not be empty.');\n    }\n    if (!model.includes('/')) {\n        // example 'gemini-1.0-pro'\n        resourcePath = `projects/${project}/locations/${location}/publishers/google/models/${model}`;\n    }\n    else if (model.startsWith('models/')) {\n        // example 'models/gemini-1.0-pro'\n        resourcePath = `projects/${project}/locations/${location}/publishers/google/${model}`;\n    }\n    else if (model.startsWith('projects/')) {\n        // example 'projects/my-project/locations/my-location/models/my-tuned-model'\n        resourcePath = model;\n    }\n    else {\n        throw new errors_1.ClientError('model parameter must be either a Model Garden model ID or a full resource name.');\n    }\n    return resourcePath;\n}\nfunction formulateRequestToGenerateContentRequest(request) {\n    if (typeof request === 'string') {\n        return {\n            contents: [{ role: util_2.constants.USER_ROLE, parts: [{ text: request }] }],\n        };\n    }\n    return request;\n}\nfunction formulateSystemInstructionIntoGenerateContentRequest(methodRequest, classSystemInstruction) {\n    if (methodRequest.systemInstruction) {\n        methodRequest.systemInstruction = (0, util_1.formulateSystemInstructionIntoContent)(methodRequest.systemInstruction);\n        return methodRequest;\n    }\n    if (classSystemInstruction) {\n        methodRequest.systemInstruction = classSystemInstruction;\n    }\n    return methodRequest;\n}\n//# sourceMappingURL=generative_models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9tb2RlbHMvZ2VuZXJhdGl2ZV9tb2RlbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyx1QkFBdUI7QUFDeEQsZUFBZSxtQkFBTyxDQUFDLDZHQUFtQjtBQUMxQyx1QkFBdUIsbUJBQU8sQ0FBQyw2SEFBMkI7QUFDMUQsMkJBQTJCLG1CQUFPLENBQUMscUlBQStCO0FBQ2xFLGlCQUFpQixtQkFBTyxDQUFDLHlHQUFpQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsK0ZBQVM7QUFDaEMsdUJBQXVCLG1CQUFPLENBQUMsK0dBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsdUJBQXVCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUIsaUNBQWlDLEVBQUU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkU7QUFDM0UsMENBQTBDO0FBQzFDO0FBQ0EsUUFBUSwyQ0FBMkM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCLGlDQUFpQyxFQUFFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6Qiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QixpQ0FBaUMsRUFBRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0EsWUFBWSxtQkFBbUI7QUFDL0I7QUFDQTtBQUNBLDJDQUEyQywrQkFBK0I7QUFDMUUsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsdUJBQXVCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHFDQUFxQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUIsaUNBQWlDLEVBQUU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRSwwQ0FBMEM7QUFDMUM7QUFDQSxRQUFRLDJDQUEyQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUIsaUNBQWlDLEVBQUU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUIsaUNBQWlDLEVBQUU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlCQUF5QjtBQUNoRDtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQSwyQ0FBMkMsc0NBQXNDO0FBQ2pGLFFBQVEsMkNBQTJDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsUUFBUSxhQUFhLFNBQVMsNEJBQTRCLE1BQU07QUFDbkc7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFFBQVEsYUFBYSxTQUFTLHFCQUFxQixNQUFNO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDRDQUE0QyxlQUFlLEdBQUc7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvbW9kZWxzL2dlbmVyYXRpdmVfbW9kZWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJhdGl2ZU1vZGVsUHJldmlldyA9IGV4cG9ydHMuR2VuZXJhdGl2ZU1vZGVsID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL2Z1bmN0aW9ucy91dGlsXCIpO1xuY29uc3QgY291bnRfdG9rZW5zXzEgPSByZXF1aXJlKFwiLi4vZnVuY3Rpb25zL2NvdW50X3Rva2Vuc1wiKTtcbmNvbnN0IGdlbmVyYXRlX2NvbnRlbnRfMSA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvZ2VuZXJhdGVfY29udGVudFwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL3R5cGVzL2Vycm9yc1wiKTtcbmNvbnN0IHV0aWxfMiA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuY29uc3QgY2hhdF9zZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9jaGF0X3Nlc3Npb25cIik7XG4vKipcbiAqIFRoZSBgR2VuZXJhdGl2ZU1vZGVsYCBjbGFzcyBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgdGhlIGdlbmVyYXRpdmUgbW9kZWxzIG9uXG4gKiBWZXJ0ZXggQUkuXG4gKiBOT1RFOiBEb24ndCBpbnN0YW50aWF0ZSB0aGlzIGNsYXNzIGRpcmVjdGx5LiBVc2VcbiAqIGB2ZXJ0ZXhhaS5nZXRHZW5lcmF0aXZlTW9kZWwoKWAgaW5zdGVhZC5cbiAqL1xuY2xhc3MgR2VuZXJhdGl2ZU1vZGVsIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zIC0ge0BsaW5rIEdldEdlbmVyYXRpdmVNb2RlbFBhcmFtc31cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMucHJvamVjdDtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5sb2NhdGlvbjtcbiAgICAgICAgdGhpcy5hcGlFbmRwb2ludCA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5hcGlFbmRwb2ludDtcbiAgICAgICAgdGhpcy5nb29nbGVBdXRoID0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zLmdvb2dsZUF1dGg7XG4gICAgICAgIHRoaXMubW9kZWwgPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMubW9kZWw7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGlvbkNvbmZpZyA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5nZW5lcmF0aW9uQ29uZmlnO1xuICAgICAgICB0aGlzLnNhZmV0eVNldHRpbmdzID0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zLnNhZmV0eVNldHRpbmdzO1xuICAgICAgICB0aGlzLnRvb2xzID0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zLnRvb2xzO1xuICAgICAgICB0aGlzLnRvb2xDb25maWcgPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMudG9vbENvbmZpZztcbiAgICAgICAgdGhpcy5yZXF1ZXN0T3B0aW9ucyA9IChfYSA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5yZXF1ZXN0T3B0aW9ucykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgICAgIGlmIChnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMuc3lzdGVtSW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtSW5zdHJ1Y3Rpb24gPSAoMCwgdXRpbF8xLmZvcm11bGF0ZVN5c3RlbUluc3RydWN0aW9uSW50b0NvbnRlbnQpKGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5zeXN0ZW1JbnN0cnVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNvdXJjZVBhdGggPSBmb3JtdWxhdGVSZXNvdXJjZVBhdGhGcm9tTW9kZWwodGhpcy5tb2RlbCwgdGhpcy5wcm9qZWN0LCB0aGlzLmxvY2F0aW9uKTtcbiAgICAgICAgLy8gcHVibGlzaGVyTW9kZWxFbmRwb2ludCBpcyBkZXByZWNhdGVkXG4gICAgICAgIHRoaXMucHVibGlzaGVyTW9kZWxFbmRwb2ludCA9IHRoaXMucmVzb3VyY2VQYXRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFjY2VzcyB0b2tlbiBmcm9tIEdvb2dsZUF1dGguIFRocm93cyB7QGxpbmsgR29vZ2xlQXV0aEVycm9yfSB3aGVuXG4gICAgICogZmFpbHMuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBvZiB0b2tlbiBzdHJpbmcuXG4gICAgICovXG4gICAgZmV0Y2hUb2tlbigpIHtcbiAgICAgICAgY29uc3QgdG9rZW5Qcm9taXNlID0gdGhpcy5nb29nbGVBdXRoLmdldEFjY2Vzc1Rva2VuKCkuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuR29vZ2xlQXV0aEVycm9yKHV0aWxfMi5jb25zdGFudHMuQ1JFREVOVElBTF9FUlJPUl9NRVNTQUdFLCBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b2tlblByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ha2VzIGFuIGFzeW5jIGNhbGwgdG8gZ2VuZXJhdGUgY29udGVudC5cbiAgICAgKlxuICAgICAqIFRoZSByZXNwb25zZSB3aWxsIGJlIHJldHVybmVkIGluIHtAbGlua1xuICAgICAqIEdlbmVyYXRlQ29udGVudFJlc3VsdC5yZXNwb25zZX0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICogICBjb250ZW50czogW3tyb2xlOiAndXNlcicsIHBhcnRzOiBbe3RleHQ6ICdIb3cgYXJlIHlvdSBkb2luZyB0b2RheT8nfV19XSxcbiAgICAgKiB9O1xuICAgICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRpdmVNb2RlbC5nZW5lcmF0ZUNvbnRlbnQocmVxdWVzdCk7XG4gICAgICogY29uc29sZS5sb2coJ1Jlc3BvbnNlOiAnLCBKU09OLnN0cmluZ2lmeShyZXN1bHQucmVzcG9uc2UpKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IC0gQSBHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0IG9iamVjdCB3aXRoIHRoZSByZXF1ZXN0IGNvbnRlbnRzLlxuICAgICAqIEByZXR1cm5zIFRoZSBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZSBvYmplY3Qgd2l0aCB0aGUgcmVzcG9uc2UgY2FuZGlkYXRlcy5cbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZUNvbnRlbnQocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ID0gZm9ybXVsYXRlUmVxdWVzdFRvR2VuZXJhdGVDb250ZW50UmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgZm9ybXVsYXRlZFJlcXVlc3QgPSBmb3JtdWxhdGVTeXN0ZW1JbnN0cnVjdGlvbkludG9HZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0KHJlcXVlc3QsIHRoaXMuc3lzdGVtSW5zdHJ1Y3Rpb24pO1xuICAgICAgICByZXR1cm4gKDAsIGdlbmVyYXRlX2NvbnRlbnRfMS5nZW5lcmF0ZUNvbnRlbnQpKHRoaXMubG9jYXRpb24sIHRoaXMucmVzb3VyY2VQYXRoLCB0aGlzLmZldGNoVG9rZW4oKSwgZm9ybXVsYXRlZFJlcXVlc3QsIHRoaXMuYXBpRW5kcG9pbnQsIHRoaXMuZ2VuZXJhdGlvbkNvbmZpZywgdGhpcy5zYWZldHlTZXR0aW5ncywgdGhpcy50b29scywgdGhpcy50b29sQ29uZmlnLCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXN5bmMgc3RyZWFtIHJlcXVlc3QgdG8gZ2VuZXJhdGUgY29udGVudC5cbiAgICAgKlxuICAgICAqIFRoZSByZXNwb25zZSBpcyByZXR1cm5lZCBjaHVuayBieSBjaHVuayBhcyBpdCdzIGJlaW5nIGdlbmVyYXRlZCBpbiB7QGxpbmtcbiAgICAgKiBTdHJlYW1HZW5lcmF0ZUNvbnRlbnRSZXN1bHQuc3RyZWFtfS4gQWZ0ZXIgYWxsIGNodW5rcyBvZiB0aGUgcmVzcG9uc2UgYXJlXG4gICAgICogcmV0dXJuZWQsIHRoZSBhZ2dyZWdhdGVkIHJlc3BvbnNlIGlzIGF2YWlsYWJsZSBpblxuICAgICAqIHtAbGluayBTdHJlYW1HZW5lcmF0ZUNvbnRlbnRSZXN1bHQucmVzcG9uc2V9LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAqICAgY29udGVudHM6IFt7cm9sZTogJ3VzZXInLCBwYXJ0czogW3t0ZXh0OiAnSG93IGFyZSB5b3UgZG9pbmcgdG9kYXk/J31dfV0sXG4gICAgICogfTtcbiAgICAgKiBjb25zdCBzdHJlYW1pbmdSZXN1bHQgPSBhd2FpdCBnZW5lcmF0aXZlTW9kZWwuZ2VuZXJhdGVDb250ZW50U3RyZWFtKHJlcXVlc3QpO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBzdHJlYW1pbmdSZXN1bHQuc3RyZWFtKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnc3RyZWFtIGNodW5rOiAnLCBKU09OLnN0cmluZ2lmeShpdGVtKSk7XG4gICAgICogfVxuICAgICAqIGNvbnN0IGFnZ3JlZ2F0ZWRSZXNwb25zZSA9IGF3YWl0IHN0cmVhbWluZ1Jlc3VsdC5yZXNwb25zZTtcbiAgICAgKiBjb25zb2xlLmxvZygnYWdncmVnYXRlZCByZXNwb25zZTogJywgSlNPTi5zdHJpbmdpZnkoYWdncmVnYXRlZFJlc3BvbnNlKSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0fVxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugb2Yge0BsaW5rIFN0cmVhbUdlbmVyYXRlQ29udGVudFJlc3VsdH1cbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZUNvbnRlbnRTdHJlYW0ocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ID0gZm9ybXVsYXRlUmVxdWVzdFRvR2VuZXJhdGVDb250ZW50UmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgZm9ybXVsYXRlZFJlcXVlc3QgPSBmb3JtdWxhdGVTeXN0ZW1JbnN0cnVjdGlvbkludG9HZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0KHJlcXVlc3QsIHRoaXMuc3lzdGVtSW5zdHJ1Y3Rpb24pO1xuICAgICAgICByZXR1cm4gKDAsIGdlbmVyYXRlX2NvbnRlbnRfMS5nZW5lcmF0ZUNvbnRlbnRTdHJlYW0pKHRoaXMubG9jYXRpb24sIHRoaXMucmVzb3VyY2VQYXRoLCB0aGlzLmZldGNoVG9rZW4oKSwgZm9ybXVsYXRlZFJlcXVlc3QsIHRoaXMuYXBpRW5kcG9pbnQsIHRoaXMuZ2VuZXJhdGlvbkNvbmZpZywgdGhpcy5zYWZldHlTZXR0aW5ncywgdGhpcy50b29scywgdGhpcy50b29sQ29uZmlnLCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXN5bmMgcmVxdWVzdCB0byBjb3VudCB0b2tlbnMuXG4gICAgICpcbiAgICAgKiBUaGUgYGNvdW50VG9rZW5zYCBmdW5jdGlvbiByZXR1cm5zIHRoZSB0b2tlbiBjb3VudCBhbmQgdGhlIG51bWJlciBvZlxuICAgICAqIGJpbGxhYmxlIGNoYXJhY3RlcnMgZm9yIGEgcHJvbXB0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAqICAgY29udGVudHM6IFt7cm9sZTogJ3VzZXInLCBwYXJ0czogW3t0ZXh0OiAnSG93IGFyZSB5b3UgZG9pbmcgdG9kYXk/J31dfV0sXG4gICAgICogfTtcbiAgICAgKiBjb25zdCByZXNwID0gYXdhaXQgZ2VuZXJhdGl2ZU1vZGVsLmNvdW50VG9rZW5zKHJlcXVlc3QpO1xuICAgICAqIGNvbnNvbGUubG9nKCdjb3VudCB0b2tlbnMgcmVzcG9uc2U6ICcsIHJlc3ApO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHJlcXVlc3QgLSBBIENvdW50VG9rZW5zUmVxdWVzdCBvYmplY3Qgd2l0aCB0aGUgcmVxdWVzdCBjb250ZW50cy5cbiAgICAgKiBAcmV0dXJucyBUaGUgQ291bnRUb2tlbnNSZXNwb25zZSBvYmplY3Qgd2l0aCB0aGUgdG9rZW4gY291bnQuXG4gICAgICovXG4gICAgYXN5bmMgY291bnRUb2tlbnMocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gKDAsIGNvdW50X3Rva2Vuc18xLmNvdW50VG9rZW5zKSh0aGlzLmxvY2F0aW9uLCB0aGlzLnJlc291cmNlUGF0aCwgdGhpcy5mZXRjaFRva2VuKCksIHJlcXVlc3QsIHRoaXMuYXBpRW5kcG9pbnQsIHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSB7QGxpbmsgQ2hhdFNlc3Npb259LlxuICAgICAqXG4gICAgICogVGhlIHtAbGluayBDaGF0U2Vzc2lvbn0gY2xhc3MgaXMgYSBzdGF0ZWZ1bCBjbGFzcyB0aGF0IGhvbGRzIHRoZSBzdGF0ZSBvZlxuICAgICAqIHRoZSBjb252ZXJzYXRpb24gd2l0aCB0aGUgbW9kZWwgYW5kIHByb3ZpZGVzIG1ldGhvZHMgdG8gaW50ZXJhY3Qgd2l0aCB0aGVcbiAgICAgKiBtb2RlbCBpbiBjaGF0IG1vZGUuIENhbGxpbmcgdGhpcyBtZXRob2QgZG9lc24ndCBtYWtlIGFueSBjYWxscyB0byBhIHJlbW90ZVxuICAgICAqIGVuZHBvaW50LiBUbyBtYWtlIHJlbW90ZSBjYWxsLCB1c2Uge0BsaW5rIENoYXRTZXNzaW9uLnNlbmRNZXNzYWdlfSBvclxuICAgICAqIEBsaW5rIENoYXRTZXNzaW9uLnNlbmRNZXNzYWdlU3RyZWFtfS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3QgY2hhdCA9IGdlbmVyYXRpdmVNb2RlbC5zdGFydENoYXQoKTtcbiAgICAgKiBjb25zdCByZXN1bHQxID0gYXdhaXQgY2hhdC5zZW5kTWVzc2FnZShcIkhvdyBjYW4gSSBsZWFybiBtb3JlIGFib3V0IE5vZGUuanM/XCIpO1xuICAgICAqIGNvbnN0IHJlc3BvbnNlMSA9IGF3YWl0IHJlc3VsdDEucmVzcG9uc2U7XG4gICAgICogY29uc29sZS5sb2coJ1Jlc3BvbnNlOiAnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZTEpKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCBjaGF0LnNlbmRNZXNzYWdlU3RyZWFtKFwiV2hhdCBhYm91dCBweXRob24/XCIpO1xuICAgICAqIGNvbnN0IHJlc3BvbnNlMiA9IGF3YWl0IHJlc3VsdDIucmVzcG9uc2U7XG4gICAgICogY29uc29sZS5sb2coJ1Jlc3BvbnNlOiAnLCBKU09OLnN0cmluZ2lmeShhd2FpdCByZXNwb25zZTIpKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IC0ge0BsaW5rIFN0YXJ0Q2hhdFBhcmFtc31cbiAgICAgKiBAcmV0dXJucyB7QGxpbmsgQ2hhdFNlc3Npb259XG4gICAgICovXG4gICAgc3RhcnRDaGF0KHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIGNvbnN0IHN0YXJ0Q2hhdFJlcXVlc3QgPSB7XG4gICAgICAgICAgICBwcm9qZWN0OiB0aGlzLnByb2plY3QsXG4gICAgICAgICAgICBsb2NhdGlvbjogdGhpcy5sb2NhdGlvbixcbiAgICAgICAgICAgIGdvb2dsZUF1dGg6IHRoaXMuZ29vZ2xlQXV0aCxcbiAgICAgICAgICAgIHB1Ymxpc2hlck1vZGVsRW5kcG9pbnQ6IHRoaXMucHVibGlzaGVyTW9kZWxFbmRwb2ludCxcbiAgICAgICAgICAgIHJlc291cmNlUGF0aDogdGhpcy5yZXNvdXJjZVBhdGgsXG4gICAgICAgICAgICB0b29sczogdGhpcy50b29scyxcbiAgICAgICAgICAgIHRvb2xDb25maWc6IHRoaXMudG9vbENvbmZpZyxcbiAgICAgICAgICAgIHN5c3RlbUluc3RydWN0aW9uOiB0aGlzLnN5c3RlbUluc3RydWN0aW9uLFxuICAgICAgICB9O1xuICAgICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICAgICAgc3RhcnRDaGF0UmVxdWVzdC5oaXN0b3J5ID0gcmVxdWVzdC5oaXN0b3J5O1xuICAgICAgICAgICAgc3RhcnRDaGF0UmVxdWVzdC5nZW5lcmF0aW9uQ29uZmlnID1cbiAgICAgICAgICAgICAgICAoX2EgPSByZXF1ZXN0LmdlbmVyYXRpb25Db25maWcpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuZ2VuZXJhdGlvbkNvbmZpZztcbiAgICAgICAgICAgIHN0YXJ0Q2hhdFJlcXVlc3Quc2FmZXR5U2V0dGluZ3MgPVxuICAgICAgICAgICAgICAgIChfYiA9IHJlcXVlc3Quc2FmZXR5U2V0dGluZ3MpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuc2FmZXR5U2V0dGluZ3M7XG4gICAgICAgICAgICBzdGFydENoYXRSZXF1ZXN0LnRvb2xzID0gKF9jID0gcmVxdWVzdC50b29scykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogdGhpcy50b29scztcbiAgICAgICAgICAgIHN0YXJ0Q2hhdFJlcXVlc3QudG9vbENvbmZpZyA9IChfZCA9IHJlcXVlc3QudG9vbENvbmZpZykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogdGhpcy50b29sQ29uZmlnO1xuICAgICAgICAgICAgc3RhcnRDaGF0UmVxdWVzdC5hcGlFbmRwb2ludCA9IChfZSA9IHJlcXVlc3QuYXBpRW5kcG9pbnQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IHRoaXMuYXBpRW5kcG9pbnQ7XG4gICAgICAgICAgICBzdGFydENoYXRSZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uID1cbiAgICAgICAgICAgICAgICAoX2YgPSByZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiB0aGlzLnN5c3RlbUluc3RydWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgY2hhdF9zZXNzaW9uXzEuQ2hhdFNlc3Npb24oc3RhcnRDaGF0UmVxdWVzdCwgdGhpcy5yZXF1ZXN0T3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5HZW5lcmF0aXZlTW9kZWwgPSBHZW5lcmF0aXZlTW9kZWw7XG4vKipcbiAqIFRoZSBgR2VuZXJhdGl2ZU1vZGVsUHJldmlld2AgY2xhc3MgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIHRoZSBnZW5lcmF0aXZlIG1vZGVsc1xuICogdGhhdCBhcmUgaW4gcHJldmlldy5cbiAqIE5PVEU6IERvbid0IGluc3RhbnRpYXRlIHRoaXMgY2xhc3MgZGlyZWN0bHkuIFVzZVxuICogYHZlcnRleGFpLnByZXZpZXcuZ2V0R2VuZXJhdGl2ZU1vZGVsKClgIGluc3RlYWQuXG4gKi9cbmNsYXNzIEdlbmVyYXRpdmVNb2RlbFByZXZpZXcge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMgLSB7QGxpbmsgR2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5wcm9qZWN0O1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zLmxvY2F0aW9uO1xuICAgICAgICB0aGlzLmFwaUVuZHBvaW50ID0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zLmFwaUVuZHBvaW50O1xuICAgICAgICB0aGlzLmdvb2dsZUF1dGggPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMuZ29vZ2xlQXV0aDtcbiAgICAgICAgdGhpcy5tb2RlbCA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5tb2RlbDtcbiAgICAgICAgdGhpcy5nZW5lcmF0aW9uQ29uZmlnID0gZ2V0R2VuZXJhdGl2ZU1vZGVsUGFyYW1zLmdlbmVyYXRpb25Db25maWc7XG4gICAgICAgIHRoaXMuc2FmZXR5U2V0dGluZ3MgPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMuc2FmZXR5U2V0dGluZ3M7XG4gICAgICAgIHRoaXMudG9vbHMgPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMudG9vbHM7XG4gICAgICAgIHRoaXMudG9vbENvbmZpZyA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy50b29sQ29uZmlnO1xuICAgICAgICB0aGlzLmNhY2hlZENvbnRlbnQgPSBnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMuY2FjaGVkQ29udGVudDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0T3B0aW9ucyA9IChfYSA9IGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5yZXF1ZXN0T3B0aW9ucykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgICAgIGlmIChnZXRHZW5lcmF0aXZlTW9kZWxQYXJhbXMuc3lzdGVtSW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtSW5zdHJ1Y3Rpb24gPSAoMCwgdXRpbF8xLmZvcm11bGF0ZVN5c3RlbUluc3RydWN0aW9uSW50b0NvbnRlbnQpKGdldEdlbmVyYXRpdmVNb2RlbFBhcmFtcy5zeXN0ZW1JbnN0cnVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNvdXJjZVBhdGggPSBmb3JtdWxhdGVSZXNvdXJjZVBhdGhGcm9tTW9kZWwodGhpcy5tb2RlbCwgdGhpcy5wcm9qZWN0LCB0aGlzLmxvY2F0aW9uKTtcbiAgICAgICAgLy8gcHVibGlzaGVyTW9kZWxFbmRwb2ludCBpcyBkZXByZWNhdGVkXG4gICAgICAgIHRoaXMucHVibGlzaGVyTW9kZWxFbmRwb2ludCA9IHRoaXMucmVzb3VyY2VQYXRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFjY2VzcyB0b2tlbiBmcm9tIEdvb2dsZUF1dGguIFRocm93cyB7QGxpbmsgR29vZ2xlQXV0aEVycm9yfSB3aGVuXG4gICAgICogZmFpbHMuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBvZiB0b2tlbiBzdHJpbmcuXG4gICAgICovXG4gICAgZmV0Y2hUb2tlbigpIHtcbiAgICAgICAgY29uc3QgdG9rZW5Qcm9taXNlID0gdGhpcy5nb29nbGVBdXRoLmdldEFjY2Vzc1Rva2VuKCkuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuR29vZ2xlQXV0aEVycm9yKHV0aWxfMi5jb25zdGFudHMuQ1JFREVOVElBTF9FUlJPUl9NRVNTQUdFLCBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b2tlblByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ha2VzIGFuIGFzeW5jIGNhbGwgdG8gZ2VuZXJhdGUgY29udGVudC5cbiAgICAgKlxuICAgICAqIFRoZSByZXNwb25zZSB3aWxsIGJlIHJldHVybmVkIGluIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRSZXN1bHQucmVzcG9uc2V9LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAqICAgY29udGVudHM6IFt7cm9sZTogJ3VzZXInLCBwYXJ0czogW3t0ZXh0OiAnSG93IGFyZSB5b3UgZG9pbmcgdG9kYXk/J31dfV0sXG4gICAgICogfTtcbiAgICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZW5lcmF0aXZlTW9kZWxQcmV2aWV3LmdlbmVyYXRlQ29udGVudChyZXF1ZXN0KTtcbiAgICAgKiBjb25zb2xlLmxvZygnUmVzcG9uc2U6ICcsIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5yZXNwb25zZSkpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHJlcXVlc3QgLSBBIEdlbmVyYXRlQ29udGVudFJlcXVlc3Qgb2JqZWN0IHdpdGggdGhlIHJlcXVlc3QgY29udGVudHMuXG4gICAgICogQHJldHVybnMgVGhlIEdlbmVyYXRlQ29udGVudFJlc3BvbnNlIG9iamVjdCB3aXRoIHRoZSByZXNwb25zZSBjYW5kaWRhdGVzLlxuICAgICAqL1xuICAgIGFzeW5jIGdlbmVyYXRlQ29udGVudChyZXF1ZXN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmVxdWVzdCA9IGZvcm11bGF0ZVJlcXVlc3RUb0dlbmVyYXRlQ29udGVudFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IGZvcm11bGF0ZWRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgLi4uZm9ybXVsYXRlU3lzdGVtSW5zdHJ1Y3Rpb25JbnRvR2VuZXJhdGVDb250ZW50UmVxdWVzdChyZXF1ZXN0LCB0aGlzLnN5c3RlbUluc3RydWN0aW9uKSxcbiAgICAgICAgICAgIGNhY2hlZENvbnRlbnQ6IChfYSA9IHRoaXMuY2FjaGVkQ29udGVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAoMCwgZ2VuZXJhdGVfY29udGVudF8xLmdlbmVyYXRlQ29udGVudCkodGhpcy5sb2NhdGlvbiwgdGhpcy5yZXNvdXJjZVBhdGgsIHRoaXMuZmV0Y2hUb2tlbigpLCBmb3JtdWxhdGVkUmVxdWVzdCwgdGhpcy5hcGlFbmRwb2ludCwgdGhpcy5nZW5lcmF0aW9uQ29uZmlnLCB0aGlzLnNhZmV0eVNldHRpbmdzLCB0aGlzLnRvb2xzLCB0aGlzLnRvb2xDb25maWcsIHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhbiBhc3luYyBzdHJlYW0gcmVxdWVzdCB0byBnZW5lcmF0ZSBjb250ZW50LlxuICAgICAqXG4gICAgICogVGhlIHJlc3BvbnNlIGlzIHJldHVybmVkIGNodW5rIGJ5IGNodW5rIGFzIGl0J3MgYmVpbmcgZ2VuZXJhdGVkIGluIHtAbGlua1xuICAgICAqIFN0cmVhbUdlbmVyYXRlQ29udGVudFJlc3VsdC5zdHJlYW19LiBBZnRlciBhbGwgY2h1bmtzIG9mIHRoZSByZXNwb25zZSBhcmVcbiAgICAgKiByZXR1cm5lZCwgdGhlIGFnZ3JlZ2F0ZWQgcmVzcG9uc2UgaXMgYXZhaWxhYmxlIGluXG4gICAgICoge0BsaW5rIFN0cmVhbUdlbmVyYXRlQ29udGVudFJlc3VsdC5yZXNwb25zZX0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICogICBjb250ZW50czogW3tyb2xlOiAndXNlcicsIHBhcnRzOiBbe3RleHQ6ICdIb3cgYXJlIHlvdSBkb2luZyB0b2RheT8nfV19XSxcbiAgICAgKiB9O1xuICAgICAqIGNvbnN0IHN0cmVhbWluZ1Jlc3VsdCA9IGF3YWl0IGdlbmVyYXRpdmVNb2RlbFByZXZpZXcuZ2VuZXJhdGVDb250ZW50U3RyZWFtKHJlcXVlc3QpO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBzdHJlYW1pbmdSZXN1bHQuc3RyZWFtKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnc3RyZWFtIGNodW5rOiAnLCBKU09OLnN0cmluZ2lmeShpdGVtKSk7XG4gICAgICogfVxuICAgICAqIGNvbnN0IGFnZ3JlZ2F0ZWRSZXNwb25zZSA9IGF3YWl0IHN0cmVhbWluZ1Jlc3VsdC5yZXNwb25zZTtcbiAgICAgKiBjb25zb2xlLmxvZygnYWdncmVnYXRlZCByZXNwb25zZTogJywgSlNPTi5zdHJpbmdpZnkoYWdncmVnYXRlZFJlc3BvbnNlKSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0fVxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugb2Yge0BsaW5rIFN0cmVhbUdlbmVyYXRlQ29udGVudFJlc3VsdH1cbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZUNvbnRlbnRTdHJlYW0ocmVxdWVzdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJlcXVlc3QgPSBmb3JtdWxhdGVSZXF1ZXN0VG9HZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICBjb25zdCBmb3JtdWxhdGVkUmVxdWVzdCA9IHtcbiAgICAgICAgICAgIC4uLmZvcm11bGF0ZVN5c3RlbUluc3RydWN0aW9uSW50b0dlbmVyYXRlQ29udGVudFJlcXVlc3QocmVxdWVzdCwgdGhpcy5zeXN0ZW1JbnN0cnVjdGlvbiksXG4gICAgICAgICAgICBjYWNoZWRDb250ZW50OiAoX2EgPSB0aGlzLmNhY2hlZENvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKDAsIGdlbmVyYXRlX2NvbnRlbnRfMS5nZW5lcmF0ZUNvbnRlbnRTdHJlYW0pKHRoaXMubG9jYXRpb24sIHRoaXMucmVzb3VyY2VQYXRoLCB0aGlzLmZldGNoVG9rZW4oKSwgZm9ybXVsYXRlZFJlcXVlc3QsIHRoaXMuYXBpRW5kcG9pbnQsIHRoaXMuZ2VuZXJhdGlvbkNvbmZpZywgdGhpcy5zYWZldHlTZXR0aW5ncywgdGhpcy50b29scywgdGhpcy50b29sQ29uZmlnLCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXN5bmMgcmVxdWVzdCB0byBjb3VudCB0b2tlbnMuXG4gICAgICpcbiAgICAgKiBUaGUgYGNvdW50VG9rZW5zYCBmdW5jdGlvbiByZXR1cm5zIHRoZSB0b2tlbiBjb3VudCBhbmQgdGhlIG51bWJlciBvZlxuICAgICAqIGJpbGxhYmxlIGNoYXJhY3RlcnMgZm9yIGEgcHJvbXB0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAqICAgY29udGVudHM6IFt7cm9sZTogJ3VzZXInLCBwYXJ0czogW3t0ZXh0OiAnSG93IGFyZSB5b3UgZG9pbmcgdG9kYXk/J31dfV0sXG4gICAgICogfTtcbiAgICAgKiBjb25zdCByZXNwID0gYXdhaXQgZ2VuZXJhdGl2ZU1vZGVsUHJldmlldy5jb3VudFRva2VucyhyZXF1ZXN0KTtcbiAgICAgKiBjb25zb2xlLmxvZygnY291bnQgdG9rZW5zIHJlc3BvbnNlOiAnLCByZXNwKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IC0gQSBDb3VudFRva2Vuc1JlcXVlc3Qgb2JqZWN0IHdpdGggdGhlIHJlcXVlc3QgY29udGVudHMuXG4gICAgICogQHJldHVybnMgVGhlIENvdW50VG9rZW5zUmVzcG9uc2Ugb2JqZWN0IHdpdGggdGhlIHRva2VuIGNvdW50LlxuICAgICAqL1xuICAgIGFzeW5jIGNvdW50VG9rZW5zKHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuICgwLCBjb3VudF90b2tlbnNfMS5jb3VudFRva2VucykodGhpcy5sb2NhdGlvbiwgdGhpcy5yZXNvdXJjZVBhdGgsIHRoaXMuZmV0Y2hUb2tlbigpLCByZXF1ZXN0LCB0aGlzLmFwaUVuZHBvaW50LCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVzIGEge0BsaW5rIENoYXRTZXNzaW9uUHJldmlld30uXG4gICAgICpcbiAgICAgKiBUaGUge0BsaW5rIENoYXRTZXNzaW9uUHJldmlld30gY2xhc3MgaXMgYSBzdGF0ZWZ1bCBjbGFzcyB0aGF0IGhvbGRzIHRoZSBzdGF0ZSBvZlxuICAgICAqIHRoZSBjb252ZXJzYXRpb24gd2l0aCB0aGUgbW9kZWwgYW5kIHByb3ZpZGVzIG1ldGhvZHMgdG8gaW50ZXJhY3Qgd2l0aCB0aGVcbiAgICAgKiBtb2RlbCBpbiBjaGF0IG1vZGUuIENhbGxpbmcgdGhpcyBtZXRob2QgZG9lc24ndCBtYWtlIGFueSBjYWxscyB0byBhIHJlbW90ZVxuICAgICAqIGVuZHBvaW50LiBUbyBtYWtlIHJlbW90ZSBjYWxsLCB1c2Uge0BsaW5rIENoYXRTZXNzaW9uUHJldmlldy5zZW5kTWVzc2FnZX0gb3JcbiAgICAgKiB7QGxpbmsgQ2hhdFNlc3Npb25QcmV2aWV3LnNlbmRNZXNzYWdlU3RyZWFtfS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3QgY2hhdCA9IGdlbmVyYXRpdmVNb2RlbFByZXZpZXcuc3RhcnRDaGF0KCk7XG4gICAgICogY29uc3QgcmVzdWx0MSA9IGF3YWl0IGNoYXQuc2VuZE1lc3NhZ2UoXCJIb3cgY2FuIEkgbGVhcm4gbW9yZSBhYm91dCBOb2RlLmpzP1wiKTtcbiAgICAgKiBjb25zdCByZXNwb25zZTEgPSBhd2FpdCByZXN1bHQxLnJlc3BvbnNlO1xuICAgICAqIGNvbnNvbGUubG9nKCdSZXNwb25zZTogJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UxKSk7XG4gICAgICpcbiAgICAgKiBjb25zdCByZXN1bHQyID0gYXdhaXQgY2hhdC5zZW5kTWVzc2FnZVN0cmVhbShcIldoYXQgYWJvdXQgcHl0aG9uP1wiKTtcbiAgICAgKiBjb25zdCByZXNwb25zZTIgPSBhd2FpdCByZXN1bHQyLnJlc3BvbnNlO1xuICAgICAqIGNvbnNvbGUubG9nKCdSZXNwb25zZTogJywgSlNPTi5zdHJpbmdpZnkoYXdhaXQgcmVzcG9uc2UyKSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtIHtAbGluayBTdGFydENoYXRQYXJhbXN9XG4gICAgICogQHJldHVybnMge0BsaW5rIENoYXRTZXNzaW9uUHJldmlld31cbiAgICAgKi9cbiAgICBzdGFydENoYXQocmVxdWVzdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgICAgICBjb25zdCBzdGFydENoYXRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgcHJvamVjdDogdGhpcy5wcm9qZWN0LFxuICAgICAgICAgICAgbG9jYXRpb246IHRoaXMubG9jYXRpb24sXG4gICAgICAgICAgICBnb29nbGVBdXRoOiB0aGlzLmdvb2dsZUF1dGgsXG4gICAgICAgICAgICBwdWJsaXNoZXJNb2RlbEVuZHBvaW50OiB0aGlzLnB1Ymxpc2hlck1vZGVsRW5kcG9pbnQsXG4gICAgICAgICAgICByZXNvdXJjZVBhdGg6IHRoaXMucmVzb3VyY2VQYXRoLFxuICAgICAgICAgICAgdG9vbHM6IHRoaXMudG9vbHMsXG4gICAgICAgICAgICB0b29sQ29uZmlnOiB0aGlzLnRvb2xDb25maWcsXG4gICAgICAgICAgICBzeXN0ZW1JbnN0cnVjdGlvbjogdGhpcy5zeXN0ZW1JbnN0cnVjdGlvbixcbiAgICAgICAgICAgIGNhY2hlZENvbnRlbnQ6IChfYSA9IHRoaXMuY2FjaGVkQ29udGVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWUsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICBzdGFydENoYXRSZXF1ZXN0Lmhpc3RvcnkgPSByZXF1ZXN0Lmhpc3Rvcnk7XG4gICAgICAgICAgICBzdGFydENoYXRSZXF1ZXN0LmdlbmVyYXRpb25Db25maWcgPVxuICAgICAgICAgICAgICAgIChfYiA9IHJlcXVlc3QuZ2VuZXJhdGlvbkNvbmZpZykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5nZW5lcmF0aW9uQ29uZmlnO1xuICAgICAgICAgICAgc3RhcnRDaGF0UmVxdWVzdC5zYWZldHlTZXR0aW5ncyA9XG4gICAgICAgICAgICAgICAgKF9jID0gcmVxdWVzdC5zYWZldHlTZXR0aW5ncykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogdGhpcy5zYWZldHlTZXR0aW5ncztcbiAgICAgICAgICAgIHN0YXJ0Q2hhdFJlcXVlc3QudG9vbHMgPSAoX2QgPSByZXF1ZXN0LnRvb2xzKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB0aGlzLnRvb2xzO1xuICAgICAgICAgICAgc3RhcnRDaGF0UmVxdWVzdC50b29sQ29uZmlnID0gKF9lID0gcmVxdWVzdC50b29sQ29uZmlnKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB0aGlzLnRvb2xDb25maWc7XG4gICAgICAgICAgICBzdGFydENoYXRSZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uID1cbiAgICAgICAgICAgICAgICAoX2YgPSByZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiB0aGlzLnN5c3RlbUluc3RydWN0aW9uO1xuICAgICAgICAgICAgc3RhcnRDaGF0UmVxdWVzdC5jYWNoZWRDb250ZW50ID1cbiAgICAgICAgICAgICAgICAoX2cgPSByZXF1ZXN0LmNhY2hlZENvbnRlbnQpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IChfaCA9IHRoaXMuY2FjaGVkQ29udGVudCkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBjaGF0X3Nlc3Npb25fMS5DaGF0U2Vzc2lvblByZXZpZXcoc3RhcnRDaGF0UmVxdWVzdCwgdGhpcy5yZXF1ZXN0T3B0aW9ucyk7XG4gICAgfVxuICAgIGdldE1vZGVsTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWw7XG4gICAgfVxuICAgIGdldENhY2hlZENvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZENvbnRlbnQ7XG4gICAgfVxuICAgIGdldFN5c3RlbUluc3RydWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeXN0ZW1JbnN0cnVjdGlvbjtcbiAgICB9XG59XG5leHBvcnRzLkdlbmVyYXRpdmVNb2RlbFByZXZpZXcgPSBHZW5lcmF0aXZlTW9kZWxQcmV2aWV3O1xuZnVuY3Rpb24gZm9ybXVsYXRlUmVzb3VyY2VQYXRoRnJvbU1vZGVsKG1vZGVsLCBwcm9qZWN0LCBsb2NhdGlvbikge1xuICAgIGxldCByZXNvdXJjZVBhdGg7XG4gICAgaWYgKCFtb2RlbCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuQ2xpZW50RXJyb3IoJ21vZGVsIHBhcmFtZXRlciBtdXN0IG5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgaWYgKCFtb2RlbC5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgIC8vIGV4YW1wbGUgJ2dlbWluaS0xLjAtcHJvJ1xuICAgICAgICByZXNvdXJjZVBhdGggPSBgcHJvamVjdHMvJHtwcm9qZWN0fS9sb2NhdGlvbnMvJHtsb2NhdGlvbn0vcHVibGlzaGVycy9nb29nbGUvbW9kZWxzLyR7bW9kZWx9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kZWwuc3RhcnRzV2l0aCgnbW9kZWxzLycpKSB7XG4gICAgICAgIC8vIGV4YW1wbGUgJ21vZGVscy9nZW1pbmktMS4wLXBybydcbiAgICAgICAgcmVzb3VyY2VQYXRoID0gYHByb2plY3RzLyR7cHJvamVjdH0vbG9jYXRpb25zLyR7bG9jYXRpb259L3B1Ymxpc2hlcnMvZ29vZ2xlLyR7bW9kZWx9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kZWwuc3RhcnRzV2l0aCgncHJvamVjdHMvJykpIHtcbiAgICAgICAgLy8gZXhhbXBsZSAncHJvamVjdHMvbXktcHJvamVjdC9sb2NhdGlvbnMvbXktbG9jYXRpb24vbW9kZWxzL215LXR1bmVkLW1vZGVsJ1xuICAgICAgICByZXNvdXJjZVBhdGggPSBtb2RlbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5DbGllbnRFcnJvcignbW9kZWwgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGEgTW9kZWwgR2FyZGVuIG1vZGVsIElEIG9yIGEgZnVsbCByZXNvdXJjZSBuYW1lLicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VQYXRoO1xufVxuZnVuY3Rpb24gZm9ybXVsYXRlUmVxdWVzdFRvR2VuZXJhdGVDb250ZW50UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGVudHM6IFt7IHJvbGU6IHV0aWxfMi5jb25zdGFudHMuVVNFUl9ST0xFLCBwYXJ0czogW3sgdGV4dDogcmVxdWVzdCB9XSB9XSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG59XG5mdW5jdGlvbiBmb3JtdWxhdGVTeXN0ZW1JbnN0cnVjdGlvbkludG9HZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0KG1ldGhvZFJlcXVlc3QsIGNsYXNzU3lzdGVtSW5zdHJ1Y3Rpb24pIHtcbiAgICBpZiAobWV0aG9kUmVxdWVzdC5zeXN0ZW1JbnN0cnVjdGlvbikge1xuICAgICAgICBtZXRob2RSZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uID0gKDAsIHV0aWxfMS5mb3JtdWxhdGVTeXN0ZW1JbnN0cnVjdGlvbkludG9Db250ZW50KShtZXRob2RSZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZFJlcXVlc3Q7XG4gICAgfVxuICAgIGlmIChjbGFzc1N5c3RlbUluc3RydWN0aW9uKSB7XG4gICAgICAgIG1ldGhvZFJlcXVlc3Quc3lzdGVtSW5zdHJ1Y3Rpb24gPSBjbGFzc1N5c3RlbUluc3RydWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kUmVxdWVzdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRpdmVfbW9kZWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/models/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerativeModelPreview = exports.GenerativeModel = exports.ChatSessionPreview = exports.ChatSession = void 0;\nvar chat_session_1 = __webpack_require__(/*! ./chat_session */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js\");\nObject.defineProperty(exports, \"ChatSession\", ({ enumerable: true, get: function () { return chat_session_1.ChatSession; } }));\nObject.defineProperty(exports, \"ChatSessionPreview\", ({ enumerable: true, get: function () { return chat_session_1.ChatSessionPreview; } }));\nvar generative_models_1 = __webpack_require__(/*! ./generative_models */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js\");\nObject.defineProperty(exports, \"GenerativeModel\", ({ enumerable: true, get: function () { return generative_models_1.GenerativeModel; } }));\nObject.defineProperty(exports, \"GenerativeModelPreview\", ({ enumerable: true, get: function () { return generative_models_1.GenerativeModelPreview; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9tb2RlbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyx1QkFBdUIsR0FBRywwQkFBMEIsR0FBRyxtQkFBbUI7QUFDM0cscUJBQXFCLG1CQUFPLENBQUMsK0dBQWdCO0FBQzdDLCtDQUE4QyxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUM1SCxzREFBcUQsRUFBRSxxQ0FBcUMsNkNBQTZDLEVBQUM7QUFDMUksMEJBQTBCLG1CQUFPLENBQUMseUhBQXFCO0FBQ3ZELG1EQUFrRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUN6SSwwREFBeUQsRUFBRSxxQ0FBcUMsc0RBQXNELEVBQUM7QUFDdkoiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9tb2RlbHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmF0aXZlTW9kZWxQcmV2aWV3ID0gZXhwb3J0cy5HZW5lcmF0aXZlTW9kZWwgPSBleHBvcnRzLkNoYXRTZXNzaW9uUHJldmlldyA9IGV4cG9ydHMuQ2hhdFNlc3Npb24gPSB2b2lkIDA7XG52YXIgY2hhdF9zZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9jaGF0X3Nlc3Npb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDaGF0U2Vzc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhdF9zZXNzaW9uXzEuQ2hhdFNlc3Npb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDaGF0U2Vzc2lvblByZXZpZXdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoYXRfc2Vzc2lvbl8xLkNoYXRTZXNzaW9uUHJldmlldzsgfSB9KTtcbnZhciBnZW5lcmF0aXZlX21vZGVsc18xID0gcmVxdWlyZShcIi4vZ2VuZXJhdGl2ZV9tb2RlbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5lcmF0aXZlTW9kZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRpdmVfbW9kZWxzXzEuR2VuZXJhdGl2ZU1vZGVsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2VuZXJhdGl2ZU1vZGVsUHJldmlld1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuZXJhdGl2ZV9tb2RlbHNfMS5HZW5lcmF0aXZlTW9kZWxQcmV2aWV3OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/cached_contents.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/resources/cached_contents.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CachedContents = exports.inferModelName = exports.inferFullResourceName = void 0;\nconst util_1 = __webpack_require__(/*! ../functions/util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/functions/util.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/index.js\");\nfunction camelToSnake(str) {\n    return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n}\nclass CachedContentsClient {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    create(cachedContent) {\n        return this.apiClient.unaryApiCall(new URL(this.apiClient.getBaseUrl() +\n            '/' +\n            this.apiClient.getBaseResourePath() +\n            '/cachedContents'), {\n            body: JSON.stringify(cachedContent),\n        }, 'POST');\n    }\n    update(cachedContent, updateMask) {\n        const url = new URL(this.apiClient.getBaseUrl() + '/' + cachedContent.name);\n        url.searchParams.append('updateMask', updateMask.map(e => camelToSnake(e)).join(','));\n        return this.apiClient.unaryApiCall(url, {\n            body: JSON.stringify(cachedContent),\n        }, 'PATCH');\n    }\n    delete(name) {\n        return this.apiClient.unaryApiCall(new URL(this.apiClient.getBaseUrl() + '/' + name), {}, 'DELETE');\n    }\n    list(pageSize, pageToken) {\n        const url = new URL(this.apiClient.getBaseUrl() +\n            '/' +\n            this.apiClient.getBaseResourePath() +\n            '/cachedContents');\n        if (pageSize)\n            url.searchParams.append('pageSize', String(pageSize));\n        if (pageToken)\n            url.searchParams.append('pageToken', pageToken);\n        return this.apiClient.unaryApiCall(url, {}, 'GET');\n    }\n    get(name) {\n        return this.apiClient.unaryApiCall(new URL(this.apiClient.getBaseUrl() + '/' + name), {}, 'GET');\n    }\n}\nfunction inferFullResourceName(project, location, cachedContentId) {\n    if (cachedContentId.startsWith('projects/')) {\n        return cachedContentId;\n    }\n    if (cachedContentId.startsWith('locations/')) {\n        return `projects/${project}/${cachedContentId}`;\n    }\n    if (cachedContentId.startsWith('cachedContents/')) {\n        return `projects/${project}/locations/${location}/${cachedContentId}`;\n    }\n    if (!cachedContentId.includes('/')) {\n        return `projects/${project}/locations/${location}/cachedContents/${cachedContentId}`;\n    }\n    throw new types_1.ClientError(`Invalid CachedContent.name: ${cachedContentId}. CachedContent.name should start with 'projects/', 'locations/', 'cachedContents/' or is a number type.`);\n}\nexports.inferFullResourceName = inferFullResourceName;\n/**\n * Infers the full model name based on the provided project, location, and model.\n *\n * @internal\n */\nfunction inferModelName(project, location, model) {\n    if (!model) {\n        throw new types_1.ClientError('Model name is required.');\n    }\n    if (model.startsWith('publishers/')) {\n        return `projects/${project}/locations/${location}/${model}`;\n    }\n    if (!model.startsWith('projects/')) {\n        return `projects/${project}/locations/${location}/publishers/google/models/${model}`;\n    }\n    return model;\n}\nexports.inferModelName = inferModelName;\n/**\n * This class is for managing Vertex AI's CachedContent resource.\n * @public\n */\nclass CachedContents {\n    constructor(client) {\n        this.client = new CachedContentsClient(client);\n    }\n    /**\n     * Creates cached content, this call will initialize the cached content in the data storage, and users need to pay for the cache data storage.\n     * @param cachedContent\n     * @param parent - Required. The parent resource where the cached content will be created.\n     */\n    create(cachedContent) {\n        const curatedCachedContent = {\n            ...cachedContent,\n            systemInstruction: cachedContent.systemInstruction\n                ? (0, util_1.formulateSystemInstructionIntoContent)(cachedContent.systemInstruction)\n                : undefined,\n            model: inferModelName(this.client.apiClient.project, this.client.apiClient.location, cachedContent.model),\n        };\n        return this.client.create(curatedCachedContent);\n    }\n    /**\n     * Updates cached content configurations\n     *\n     * @param updateMask - Required. The list of fields to update. Format: google-fieldmask. See {@link https://cloud.google.com/docs/discovery/type-format}\n     * @param name - Immutable. Identifier. The server-generated resource name of the cached content Format: projects/{project}/locations/{location}/cachedContents/{cached_content}.\n     */\n    update(cachedContent, updateMask) {\n        if (!cachedContent.name) {\n            throw new types_1.ClientError('Cached content name is required for update.');\n        }\n        if (!updateMask || updateMask.length === 0) {\n            throw new types_1.ClientError('Update mask is required for update. Fields set in cachedContent but not in updateMask will be ignored. Examples: [\"ttl\"] or [\"expireTime\"].');\n        }\n        const curatedCachedContent = {\n            ...cachedContent,\n            systemInstruction: cachedContent.systemInstruction\n                ? (0, util_1.formulateSystemInstructionIntoContent)(cachedContent.systemInstruction)\n                : undefined,\n            name: inferFullResourceName(this.client.apiClient.project, this.client.apiClient.location, cachedContent.name),\n        };\n        return this.client.update(curatedCachedContent, updateMask);\n    }\n    /**\n     * Deletes cached content.\n     *\n     * @param name - Required. The resource name referring to the cached content.\n     */\n    delete(name) {\n        return this.client.delete(inferFullResourceName(this.client.apiClient.project, this.client.apiClient.location, name));\n    }\n    /**\n     * Lists cached contents in a project.\n     *\n     * @param pageSize - Optional. The maximum number of cached contents to return. The service may return fewer than this value. If unspecified, some default (under maximum) number of items will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.\n     * @param pageToken - Optional. A page token, received from a previous `ListCachedContents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCachedContents` must match the call that provided the page token.\n     */\n    list(pageSize, pageToken) {\n        return this.client.list(pageSize, pageToken);\n    }\n    /**\n     * Gets cached content configurations.\n     *\n     * @param name - Required. The resource name referring to the cached content.\n     */\n    get(name) {\n        return this.client.get(inferFullResourceName(this.client.apiClient.project, this.client.apiClient.location, name));\n    }\n}\nexports.CachedContents = CachedContents;\n//# sourceMappingURL=cached_contents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9yZXNvdXJjZXMvY2FjaGVkX2NvbnRlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsc0JBQXNCLEdBQUcsNkJBQTZCO0FBQy9FLGVBQWUsbUJBQU8sQ0FBQyw2R0FBbUI7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEM7QUFDQSwrQ0FBK0MscUJBQXFCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRLEdBQUcsZ0JBQWdCO0FBQ3REO0FBQ0E7QUFDQSwyQkFBMkIsUUFBUSxhQUFhLFNBQVMsR0FBRyxnQkFBZ0I7QUFDNUU7QUFDQTtBQUNBLDJCQUEyQixRQUFRLGFBQWEsU0FBUyxrQkFBa0IsZ0JBQWdCO0FBQzNGO0FBQ0EsaUVBQWlFLGdCQUFnQjtBQUNqRjtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRLGFBQWEsU0FBUyxHQUFHLE1BQU07QUFDbEU7QUFDQTtBQUNBLDJCQUEyQixRQUFRLGFBQWEsU0FBUyw0QkFBNEIsTUFBTTtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRztBQUNsRyx1SEFBdUgsUUFBUSxZQUFZLFNBQVMsaUJBQWlCLGVBQWU7QUFDcEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0T0FBNE87QUFDNU87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvdmVydGV4YWkvYnVpbGQvc3JjL3Jlc291cmNlcy9jYWNoZWRfY29udGVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYWNoZWRDb250ZW50cyA9IGV4cG9ydHMuaW5mZXJNb2RlbE5hbWUgPSBleHBvcnRzLmluZmVyRnVsbFJlc291cmNlTmFtZSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvdXRpbFwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5mdW5jdGlvbiBjYW1lbFRvU25ha2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bQS1aXS9nLCBsZXR0ZXIgPT4gYF8ke2xldHRlci50b0xvd2VyQ2FzZSgpfWApO1xufVxuY2xhc3MgQ2FjaGVkQ29udGVudHNDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGFwaUNsaWVudCkge1xuICAgICAgICB0aGlzLmFwaUNsaWVudCA9IGFwaUNsaWVudDtcbiAgICB9XG4gICAgY3JlYXRlKGNhY2hlZENvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LnVuYXJ5QXBpQ2FsbChuZXcgVVJMKHRoaXMuYXBpQ2xpZW50LmdldEJhc2VVcmwoKSArXG4gICAgICAgICAgICAnLycgK1xuICAgICAgICAgICAgdGhpcy5hcGlDbGllbnQuZ2V0QmFzZVJlc291cmVQYXRoKCkgK1xuICAgICAgICAgICAgJy9jYWNoZWRDb250ZW50cycpLCB7XG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjYWNoZWRDb250ZW50KSxcbiAgICAgICAgfSwgJ1BPU1QnKTtcbiAgICB9XG4gICAgdXBkYXRlKGNhY2hlZENvbnRlbnQsIHVwZGF0ZU1hc2spIHtcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh0aGlzLmFwaUNsaWVudC5nZXRCYXNlVXJsKCkgKyAnLycgKyBjYWNoZWRDb250ZW50Lm5hbWUpO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgndXBkYXRlTWFzaycsIHVwZGF0ZU1hc2subWFwKGUgPT4gY2FtZWxUb1NuYWtlKGUpKS5qb2luKCcsJykpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQudW5hcnlBcGlDYWxsKHVybCwge1xuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoY2FjaGVkQ29udGVudCksXG4gICAgICAgIH0sICdQQVRDSCcpO1xuICAgIH1cbiAgICBkZWxldGUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQudW5hcnlBcGlDYWxsKG5ldyBVUkwodGhpcy5hcGlDbGllbnQuZ2V0QmFzZVVybCgpICsgJy8nICsgbmFtZSksIHt9LCAnREVMRVRFJyk7XG4gICAgfVxuICAgIGxpc3QocGFnZVNpemUsIHBhZ2VUb2tlbikge1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHRoaXMuYXBpQ2xpZW50LmdldEJhc2VVcmwoKSArXG4gICAgICAgICAgICAnLycgK1xuICAgICAgICAgICAgdGhpcy5hcGlDbGllbnQuZ2V0QmFzZVJlc291cmVQYXRoKCkgK1xuICAgICAgICAgICAgJy9jYWNoZWRDb250ZW50cycpO1xuICAgICAgICBpZiAocGFnZVNpemUpXG4gICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgncGFnZVNpemUnLCBTdHJpbmcocGFnZVNpemUpKTtcbiAgICAgICAgaWYgKHBhZ2VUb2tlbilcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdwYWdlVG9rZW4nLCBwYWdlVG9rZW4pO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQudW5hcnlBcGlDYWxsKHVybCwge30sICdHRVQnKTtcbiAgICB9XG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LnVuYXJ5QXBpQ2FsbChuZXcgVVJMKHRoaXMuYXBpQ2xpZW50LmdldEJhc2VVcmwoKSArICcvJyArIG5hbWUpLCB7fSwgJ0dFVCcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluZmVyRnVsbFJlc291cmNlTmFtZShwcm9qZWN0LCBsb2NhdGlvbiwgY2FjaGVkQ29udGVudElkKSB7XG4gICAgaWYgKGNhY2hlZENvbnRlbnRJZC5zdGFydHNXaXRoKCdwcm9qZWN0cy8nKSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkQ29udGVudElkO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkQ29udGVudElkLnN0YXJ0c1dpdGgoJ2xvY2F0aW9ucy8nKSkge1xuICAgICAgICByZXR1cm4gYHByb2plY3RzLyR7cHJvamVjdH0vJHtjYWNoZWRDb250ZW50SWR9YDtcbiAgICB9XG4gICAgaWYgKGNhY2hlZENvbnRlbnRJZC5zdGFydHNXaXRoKCdjYWNoZWRDb250ZW50cy8nKSkge1xuICAgICAgICByZXR1cm4gYHByb2plY3RzLyR7cHJvamVjdH0vbG9jYXRpb25zLyR7bG9jYXRpb259LyR7Y2FjaGVkQ29udGVudElkfWA7XG4gICAgfVxuICAgIGlmICghY2FjaGVkQ29udGVudElkLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgICAgcmV0dXJuIGBwcm9qZWN0cy8ke3Byb2plY3R9L2xvY2F0aW9ucy8ke2xvY2F0aW9ufS9jYWNoZWRDb250ZW50cy8ke2NhY2hlZENvbnRlbnRJZH1gO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgdHlwZXNfMS5DbGllbnRFcnJvcihgSW52YWxpZCBDYWNoZWRDb250ZW50Lm5hbWU6ICR7Y2FjaGVkQ29udGVudElkfS4gQ2FjaGVkQ29udGVudC5uYW1lIHNob3VsZCBzdGFydCB3aXRoICdwcm9qZWN0cy8nLCAnbG9jYXRpb25zLycsICdjYWNoZWRDb250ZW50cy8nIG9yIGlzIGEgbnVtYmVyIHR5cGUuYCk7XG59XG5leHBvcnRzLmluZmVyRnVsbFJlc291cmNlTmFtZSA9IGluZmVyRnVsbFJlc291cmNlTmFtZTtcbi8qKlxuICogSW5mZXJzIHRoZSBmdWxsIG1vZGVsIG5hbWUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHByb2plY3QsIGxvY2F0aW9uLCBhbmQgbW9kZWwuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGluZmVyTW9kZWxOYW1lKHByb2plY3QsIGxvY2F0aW9uLCBtb2RlbCkge1xuICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuQ2xpZW50RXJyb3IoJ01vZGVsIG5hbWUgaXMgcmVxdWlyZWQuJyk7XG4gICAgfVxuICAgIGlmIChtb2RlbC5zdGFydHNXaXRoKCdwdWJsaXNoZXJzLycpKSB7XG4gICAgICAgIHJldHVybiBgcHJvamVjdHMvJHtwcm9qZWN0fS9sb2NhdGlvbnMvJHtsb2NhdGlvbn0vJHttb2RlbH1gO1xuICAgIH1cbiAgICBpZiAoIW1vZGVsLnN0YXJ0c1dpdGgoJ3Byb2plY3RzLycpKSB7XG4gICAgICAgIHJldHVybiBgcHJvamVjdHMvJHtwcm9qZWN0fS9sb2NhdGlvbnMvJHtsb2NhdGlvbn0vcHVibGlzaGVycy9nb29nbGUvbW9kZWxzLyR7bW9kZWx9YDtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsO1xufVxuZXhwb3J0cy5pbmZlck1vZGVsTmFtZSA9IGluZmVyTW9kZWxOYW1lO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGZvciBtYW5hZ2luZyBWZXJ0ZXggQUkncyBDYWNoZWRDb250ZW50IHJlc291cmNlLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBDYWNoZWRDb250ZW50cyB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gbmV3IENhY2hlZENvbnRlbnRzQ2xpZW50KGNsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgY2FjaGVkIGNvbnRlbnQsIHRoaXMgY2FsbCB3aWxsIGluaXRpYWxpemUgdGhlIGNhY2hlZCBjb250ZW50IGluIHRoZSBkYXRhIHN0b3JhZ2UsIGFuZCB1c2VycyBuZWVkIHRvIHBheSBmb3IgdGhlIGNhY2hlIGRhdGEgc3RvcmFnZS5cbiAgICAgKiBAcGFyYW0gY2FjaGVkQ29udGVudFxuICAgICAqIEBwYXJhbSBwYXJlbnQgLSBSZXF1aXJlZC4gVGhlIHBhcmVudCByZXNvdXJjZSB3aGVyZSB0aGUgY2FjaGVkIGNvbnRlbnQgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZShjYWNoZWRDb250ZW50KSB7XG4gICAgICAgIGNvbnN0IGN1cmF0ZWRDYWNoZWRDb250ZW50ID0ge1xuICAgICAgICAgICAgLi4uY2FjaGVkQ29udGVudCxcbiAgICAgICAgICAgIHN5c3RlbUluc3RydWN0aW9uOiBjYWNoZWRDb250ZW50LnN5c3RlbUluc3RydWN0aW9uXG4gICAgICAgICAgICAgICAgPyAoMCwgdXRpbF8xLmZvcm11bGF0ZVN5c3RlbUluc3RydWN0aW9uSW50b0NvbnRlbnQpKGNhY2hlZENvbnRlbnQuc3lzdGVtSW5zdHJ1Y3Rpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtb2RlbDogaW5mZXJNb2RlbE5hbWUodGhpcy5jbGllbnQuYXBpQ2xpZW50LnByb2plY3QsIHRoaXMuY2xpZW50LmFwaUNsaWVudC5sb2NhdGlvbiwgY2FjaGVkQ29udGVudC5tb2RlbCksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5jcmVhdGUoY3VyYXRlZENhY2hlZENvbnRlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGNhY2hlZCBjb250ZW50IGNvbmZpZ3VyYXRpb25zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXBkYXRlTWFzayAtIFJlcXVpcmVkLiBUaGUgbGlzdCBvZiBmaWVsZHMgdG8gdXBkYXRlLiBGb3JtYXQ6IGdvb2dsZS1maWVsZG1hc2suIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvZGlzY292ZXJ5L3R5cGUtZm9ybWF0fVxuICAgICAqIEBwYXJhbSBuYW1lIC0gSW1tdXRhYmxlLiBJZGVudGlmaWVyLiBUaGUgc2VydmVyLWdlbmVyYXRlZCByZXNvdXJjZSBuYW1lIG9mIHRoZSBjYWNoZWQgY29udGVudCBGb3JtYXQ6IHByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9jYWNoZWRDb250ZW50cy97Y2FjaGVkX2NvbnRlbnR9LlxuICAgICAqL1xuICAgIHVwZGF0ZShjYWNoZWRDb250ZW50LCB1cGRhdGVNYXNrKSB7XG4gICAgICAgIGlmICghY2FjaGVkQ29udGVudC5uYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5DbGllbnRFcnJvcignQ2FjaGVkIGNvbnRlbnQgbmFtZSBpcyByZXF1aXJlZCBmb3IgdXBkYXRlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdXBkYXRlTWFzayB8fCB1cGRhdGVNYXNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuQ2xpZW50RXJyb3IoJ1VwZGF0ZSBtYXNrIGlzIHJlcXVpcmVkIGZvciB1cGRhdGUuIEZpZWxkcyBzZXQgaW4gY2FjaGVkQ29udGVudCBidXQgbm90IGluIHVwZGF0ZU1hc2sgd2lsbCBiZSBpZ25vcmVkLiBFeGFtcGxlczogW1widHRsXCJdIG9yIFtcImV4cGlyZVRpbWVcIl0uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VyYXRlZENhY2hlZENvbnRlbnQgPSB7XG4gICAgICAgICAgICAuLi5jYWNoZWRDb250ZW50LFxuICAgICAgICAgICAgc3lzdGVtSW5zdHJ1Y3Rpb246IGNhY2hlZENvbnRlbnQuc3lzdGVtSW5zdHJ1Y3Rpb25cbiAgICAgICAgICAgICAgICA/ICgwLCB1dGlsXzEuZm9ybXVsYXRlU3lzdGVtSW5zdHJ1Y3Rpb25JbnRvQ29udGVudCkoY2FjaGVkQ29udGVudC5zeXN0ZW1JbnN0cnVjdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG5hbWU6IGluZmVyRnVsbFJlc291cmNlTmFtZSh0aGlzLmNsaWVudC5hcGlDbGllbnQucHJvamVjdCwgdGhpcy5jbGllbnQuYXBpQ2xpZW50LmxvY2F0aW9uLCBjYWNoZWRDb250ZW50Lm5hbWUpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQudXBkYXRlKGN1cmF0ZWRDYWNoZWRDb250ZW50LCB1cGRhdGVNYXNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBjYWNoZWQgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gUmVxdWlyZWQuIFRoZSByZXNvdXJjZSBuYW1lIHJlZmVycmluZyB0byB0aGUgY2FjaGVkIGNvbnRlbnQuXG4gICAgICovXG4gICAgZGVsZXRlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmRlbGV0ZShpbmZlckZ1bGxSZXNvdXJjZU5hbWUodGhpcy5jbGllbnQuYXBpQ2xpZW50LnByb2plY3QsIHRoaXMuY2xpZW50LmFwaUNsaWVudC5sb2NhdGlvbiwgbmFtZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyBjYWNoZWQgY29udGVudHMgaW4gYSBwcm9qZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhZ2VTaXplIC0gT3B0aW9uYWwuIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjYWNoZWQgY29udGVudHMgdG8gcmV0dXJuLiBUaGUgc2VydmljZSBtYXkgcmV0dXJuIGZld2VyIHRoYW4gdGhpcyB2YWx1ZS4gSWYgdW5zcGVjaWZpZWQsIHNvbWUgZGVmYXVsdCAodW5kZXIgbWF4aW11bSkgbnVtYmVyIG9mIGl0ZW1zIHdpbGwgYmUgcmV0dXJuZWQuIFRoZSBtYXhpbXVtIHZhbHVlIGlzIDEwMDA7IHZhbHVlcyBhYm92ZSAxMDAwIHdpbGwgYmUgY29lcmNlZCB0byAxMDAwLlxuICAgICAqIEBwYXJhbSBwYWdlVG9rZW4gLSBPcHRpb25hbC4gQSBwYWdlIHRva2VuLCByZWNlaXZlZCBmcm9tIGEgcHJldmlvdXMgYExpc3RDYWNoZWRDb250ZW50c2AgY2FsbC4gUHJvdmlkZSB0aGlzIHRvIHJldHJpZXZlIHRoZSBzdWJzZXF1ZW50IHBhZ2UuIFdoZW4gcGFnaW5hdGluZywgYWxsIG90aGVyIHBhcmFtZXRlcnMgcHJvdmlkZWQgdG8gYExpc3RDYWNoZWRDb250ZW50c2AgbXVzdCBtYXRjaCB0aGUgY2FsbCB0aGF0IHByb3ZpZGVkIHRoZSBwYWdlIHRva2VuLlxuICAgICAqL1xuICAgIGxpc3QocGFnZVNpemUsIHBhZ2VUb2tlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQubGlzdChwYWdlU2l6ZSwgcGFnZVRva2VuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBjYWNoZWQgY29udGVudCBjb25maWd1cmF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gUmVxdWlyZWQuIFRoZSByZXNvdXJjZSBuYW1lIHJlZmVycmluZyB0byB0aGUgY2FjaGVkIGNvbnRlbnQuXG4gICAgICovXG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChpbmZlckZ1bGxSZXNvdXJjZU5hbWUodGhpcy5jbGllbnQuYXBpQ2xpZW50LnByb2plY3QsIHRoaXMuY2xpZW50LmFwaUNsaWVudC5sb2NhdGlvbiwgbmFtZSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FjaGVkQ29udGVudHMgPSBDYWNoZWRDb250ZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlZF9jb250ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/cached_contents.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/resources/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiClient = exports.CachedContents = void 0;\nvar cached_contents_1 = __webpack_require__(/*! ./cached_contents */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/cached_contents.js\");\nObject.defineProperty(exports, \"CachedContents\", ({ enumerable: true, get: function () { return cached_contents_1.CachedContents; } }));\nvar api_client_1 = __webpack_require__(/*! ./shared/api_client */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/shared/api_client.js\");\nObject.defineProperty(exports, \"ApiClient\", ({ enumerable: true, get: function () { return api_client_1.ApiClient; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9yZXNvdXJjZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxzQkFBc0I7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsd0hBQW1CO0FBQ25ELGtEQUFpRCxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUNySSxtQkFBbUIsbUJBQU8sQ0FBQyw0SEFBcUI7QUFDaEQsNkNBQTRDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3RIIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvcmVzb3VyY2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXBpQ2xpZW50ID0gZXhwb3J0cy5DYWNoZWRDb250ZW50cyA9IHZvaWQgMDtcbnZhciBjYWNoZWRfY29udGVudHNfMSA9IHJlcXVpcmUoXCIuL2NhY2hlZF9jb250ZW50c1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhY2hlZENvbnRlbnRzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZWRfY29udGVudHNfMS5DYWNoZWRDb250ZW50czsgfSB9KTtcbnZhciBhcGlfY2xpZW50XzEgPSByZXF1aXJlKFwiLi9zaGFyZWQvYXBpX2NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFwaUNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXBpX2NsaWVudF8xLkFwaUNsaWVudDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/shared/api_client.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/resources/shared/api_client.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiClient = void 0;\nconst util_1 = __webpack_require__(/*! ../../util */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\nconst types_1 = __webpack_require__(/*! ../../types */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/index.js\");\nconst AUTHORIZATION_HEADER = 'Authorization';\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\nclass ApiClient {\n    constructor(project, location, apiVersion, googleAuth) {\n        this.project = project;\n        this.location = location;\n        this.apiVersion = apiVersion;\n        this.googleAuth = googleAuth;\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token string.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new types_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    getBaseUrl() {\n        return `https://${this.location}-aiplatform.googleapis.com/${this.apiVersion}`;\n    }\n    getBaseResourePath() {\n        return `projects/${this.project}/locations/${this.location}`;\n    }\n    async unaryApiCall(url, requestInit, httpMethod) {\n        const token = await this.getHeaders();\n        return this.apiCall(url.toString(), {\n            ...requestInit,\n            method: httpMethod,\n            headers: token,\n        });\n    }\n    async apiCall(url, requestInit) {\n        const response = await fetch(url, requestInit).catch(e => {\n            throw new types_1.GoogleGenerativeAIError(`exception sending request to url: ${url} with requestInit: ${JSON.stringify(requestInit)}}`, e);\n        });\n        await throwErrorIfNotOK(response, url, requestInit).catch(e => {\n            throw e;\n        });\n        try {\n            return await response.json();\n        }\n        catch (e) {\n            throw new types_1.GoogleGenerativeAIError(JSON.stringify(response), e);\n        }\n    }\n    async getHeaders() {\n        const token = await this.fetchToken();\n        return new Headers({\n            [AUTHORIZATION_HEADER]: `Bearer ${token}`,\n            [CONTENT_TYPE_HEADER]: 'application/json',\n            [USER_AGENT_HEADER]: util_1.constants.USER_AGENT,\n        });\n    }\n}\nexports.ApiClient = ApiClient;\nasync function throwErrorIfNotOK(response, url, requestInit) {\n    var _a;\n    if (response === undefined) {\n        throw new types_1.GoogleGenerativeAIError('response is undefined');\n    }\n    if (!response.ok) {\n        const status = response.status;\n        const statusText = response.statusText;\n        let errorBody;\n        if ((_a = response.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')) {\n            errorBody = await response.json();\n        }\n        else {\n            errorBody = {\n                error: {\n                    message: `exception sending request to url: ${url} with requestInit: ${JSON.stringify(requestInit)}}`,\n                    code: response.status,\n                    status: response.statusText,\n                },\n            };\n        }\n        const errorMessage = `got status: ${status} ${statusText}. ${JSON.stringify(errorBody)}`;\n        if (status >= 400 && status < 500) {\n            const error = new types_1.ClientError(errorMessage, new types_1.GoogleApiError(errorBody.error.message, errorBody.error.code, errorBody.error.status, errorBody.error.details));\n            throw error;\n        }\n        throw new types_1.GoogleGenerativeAIError(errorMessage);\n    }\n}\n//# sourceMappingURL=api_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9yZXNvdXJjZXMvc2hhcmVkL2FwaV9jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsZUFBZSxtQkFBTyxDQUFDLGtHQUFZO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLG9HQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsdUJBQXVCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYyw2QkFBNkIsZ0JBQWdCO0FBQ3JGO0FBQ0E7QUFDQSwyQkFBMkIsYUFBYSxhQUFhLGNBQWM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLEtBQUssb0JBQW9CLDZCQUE2QjtBQUNqSixTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxNQUFNO0FBQ3BEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsS0FBSyxvQkFBb0IsNkJBQTZCO0FBQ3hIO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDRDQUE0QyxRQUFRLEVBQUUsV0FBVyxJQUFJLDBCQUEwQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvcmVzb3VyY2VzL3NoYXJlZC9hcGlfY2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXBpQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xuY29uc3QgQVVUSE9SSVpBVElPTl9IRUFERVIgPSAnQXV0aG9yaXphdGlvbic7XG5jb25zdCBDT05URU5UX1RZUEVfSEVBREVSID0gJ0NvbnRlbnQtVHlwZSc7XG5jb25zdCBVU0VSX0FHRU5UX0hFQURFUiA9ICdVc2VyLUFnZW50JztcbmNsYXNzIEFwaUNsaWVudCB7XG4gICAgY29uc3RydWN0b3IocHJvamVjdCwgbG9jYXRpb24sIGFwaVZlcnNpb24sIGdvb2dsZUF1dGgpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB0aGlzLmFwaVZlcnNpb24gPSBhcGlWZXJzaW9uO1xuICAgICAgICB0aGlzLmdvb2dsZUF1dGggPSBnb29nbGVBdXRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFjY2VzcyB0b2tlbiBmcm9tIEdvb2dsZUF1dGguIFRocm93cyB7QGxpbmsgR29vZ2xlQXV0aEVycm9yfSB3aGVuXG4gICAgICogZmFpbHMuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBvZiB0b2tlbiBzdHJpbmcuXG4gICAgICovXG4gICAgZmV0Y2hUb2tlbigpIHtcbiAgICAgICAgY29uc3QgdG9rZW5Qcm9taXNlID0gdGhpcy5nb29nbGVBdXRoLmdldEFjY2Vzc1Rva2VuKCkuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5Hb29nbGVBdXRoRXJyb3IodXRpbF8xLmNvbnN0YW50cy5DUkVERU5USUFMX0VSUk9SX01FU1NBR0UsIGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRva2VuUHJvbWlzZTtcbiAgICB9XG4gICAgZ2V0QmFzZVVybCgpIHtcbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7dGhpcy5sb2NhdGlvbn0tYWlwbGF0Zm9ybS5nb29nbGVhcGlzLmNvbS8ke3RoaXMuYXBpVmVyc2lvbn1gO1xuICAgIH1cbiAgICBnZXRCYXNlUmVzb3VyZVBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgcHJvamVjdHMvJHt0aGlzLnByb2plY3R9L2xvY2F0aW9ucy8ke3RoaXMubG9jYXRpb259YDtcbiAgICB9XG4gICAgYXN5bmMgdW5hcnlBcGlDYWxsKHVybCwgcmVxdWVzdEluaXQsIGh0dHBNZXRob2QpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldEhlYWRlcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpQ2FsbCh1cmwudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgLi4ucmVxdWVzdEluaXQsXG4gICAgICAgICAgICBtZXRob2Q6IGh0dHBNZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiB0b2tlbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGFwaUNhbGwodXJsLCByZXF1ZXN0SW5pdCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgcmVxdWVzdEluaXQpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoYGV4Y2VwdGlvbiBzZW5kaW5nIHJlcXVlc3QgdG8gdXJsOiAke3VybH0gd2l0aCByZXF1ZXN0SW5pdDogJHtKU09OLnN0cmluZ2lmeShyZXF1ZXN0SW5pdCl9fWAsIGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhyb3dFcnJvcklmTm90T0socmVzcG9uc2UsIHVybCwgcmVxdWVzdEluaXQpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5Hb29nbGVHZW5lcmF0aXZlQUlFcnJvcihKU09OLnN0cmluZ2lmeShyZXNwb25zZSksIGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldEhlYWRlcnMoKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5mZXRjaFRva2VuKCk7XG4gICAgICAgIHJldHVybiBuZXcgSGVhZGVycyh7XG4gICAgICAgICAgICBbQVVUSE9SSVpBVElPTl9IRUFERVJdOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICAgICAgICAgIFtDT05URU5UX1RZUEVfSEVBREVSXTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgW1VTRVJfQUdFTlRfSEVBREVSXTogdXRpbF8xLmNvbnN0YW50cy5VU0VSX0FHRU5ULFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkFwaUNsaWVudCA9IEFwaUNsaWVudDtcbmFzeW5jIGZ1bmN0aW9uIHRocm93RXJyb3JJZk5vdE9LKHJlc3BvbnNlLCB1cmwsIHJlcXVlc3RJbml0KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChyZXNwb25zZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLkdvb2dsZUdlbmVyYXRpdmVBSUVycm9yKCdyZXNwb25zZSBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgIGNvbnN0IHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuICAgICAgICBsZXQgZXJyb3JCb2R5O1xuICAgICAgICBpZiAoKF9hID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgICAgICAgZXJyb3JCb2R5ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JCb2R5ID0ge1xuICAgICAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBleGNlcHRpb24gc2VuZGluZyByZXF1ZXN0IHRvIHVybDogJHt1cmx9IHdpdGggcmVxdWVzdEluaXQ6ICR7SlNPTi5zdHJpbmdpZnkocmVxdWVzdEluaXQpfX1gLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgZ290IHN0YXR1czogJHtzdGF0dXN9ICR7c3RhdHVzVGV4dH0uICR7SlNPTi5zdHJpbmdpZnkoZXJyb3JCb2R5KX1gO1xuICAgICAgICBpZiAoc3RhdHVzID49IDQwMCAmJiBzdGF0dXMgPCA1MDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IHR5cGVzXzEuQ2xpZW50RXJyb3IoZXJyb3JNZXNzYWdlLCBuZXcgdHlwZXNfMS5Hb29nbGVBcGlFcnJvcihlcnJvckJvZHkuZXJyb3IubWVzc2FnZSwgZXJyb3JCb2R5LmVycm9yLmNvZGUsIGVycm9yQm9keS5lcnJvci5zdGF0dXMsIGVycm9yQm9keS5lcnJvci5kZXRhaWxzKSk7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5Hb29nbGVHZW5lcmF0aXZlQUlFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaV9jbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/shared/api_client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/common.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/common.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SchemaType = void 0;\n/** This file contains interfaces that are usable in the types folder. */\n/**\n * The list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n */\nvar SchemaType;\n(function (SchemaType) {\n    /** String type. */\n    SchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */\n    SchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */\n    SchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */\n    SchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */\n    SchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */\n    SchemaType[\"OBJECT\"] = \"OBJECT\";\n})(SchemaType || (exports.SchemaType = SchemaType = {}));\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlCQUFpQixrQkFBa0Isa0JBQWtCO0FBQ3REIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvY29tbW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2NoZW1hVHlwZSA9IHZvaWQgMDtcbi8qKiBUaGlzIGZpbGUgY29udGFpbnMgaW50ZXJmYWNlcyB0aGF0IGFyZSB1c2FibGUgaW4gdGhlIHR5cGVzIGZvbGRlci4gKi9cbi8qKlxuICogVGhlIGxpc3Qgb2YgT3BlbkFQSSBkYXRhIHR5cGVzXG4gKiBhcyBkZWZpbmVkIGJ5IGh0dHBzOi8vc3dhZ2dlci5pby9kb2NzL3NwZWNpZmljYXRpb24vZGF0YS1tb2RlbHMvZGF0YS10eXBlcy9cbiAqL1xudmFyIFNjaGVtYVR5cGU7XG4oZnVuY3Rpb24gKFNjaGVtYVR5cGUpIHtcbiAgICAvKiogU3RyaW5nIHR5cGUuICovXG4gICAgU2NoZW1hVHlwZVtcIlNUUklOR1wiXSA9IFwiU1RSSU5HXCI7XG4gICAgLyoqIE51bWJlciB0eXBlLiAqL1xuICAgIFNjaGVtYVR5cGVbXCJOVU1CRVJcIl0gPSBcIk5VTUJFUlwiO1xuICAgIC8qKiBJbnRlZ2VyIHR5cGUuICovXG4gICAgU2NoZW1hVHlwZVtcIklOVEVHRVJcIl0gPSBcIklOVEVHRVJcIjtcbiAgICAvKiogQm9vbGVhbiB0eXBlLiAqL1xuICAgIFNjaGVtYVR5cGVbXCJCT09MRUFOXCJdID0gXCJCT09MRUFOXCI7XG4gICAgLyoqIEFycmF5IHR5cGUuICovXG4gICAgU2NoZW1hVHlwZVtcIkFSUkFZXCJdID0gXCJBUlJBWVwiO1xuICAgIC8qKiBPYmplY3QgdHlwZS4gKi9cbiAgICBTY2hlbWFUeXBlW1wiT0JKRUNUXCJdID0gXCJPQkpFQ1RcIjtcbn0pKFNjaGVtYVR5cGUgfHwgKGV4cG9ydHMuU2NoZW1hVHlwZSA9IFNjaGVtYVR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/common.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/content.js":
/*!************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/content.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FunctionDeclarationSchemaType = exports.Mode = exports.FinishReason = exports.BlockedReason = exports.HarmSeverity = exports.HarmProbability = exports.HarmBlockThreshold = exports.HarmCategory = void 0;\nconst common_1 = __webpack_require__(/*! ./common */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/common.js\");\n/**\n * Harm categories that will block the content.\n */\nvar HarmCategory;\n(function (HarmCategory) {\n    /** The harm category is unspecified. */\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    /** The harm category is hate speech. */\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    /** The harm category is dangerous content. */\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n    /** The harm category is harassment. */\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    /** The harm category is sexually explicit content. */\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n})(HarmCategory || (exports.HarmCategory = HarmCategory = {}));\n/**\n * Probability based thresholds levels for blocking.\n */\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n    /** Unspecified harm block threshold. */\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    /** Block low threshold and above (i.e. block more). */\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    /** Block medium threshold and above. */\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    /** Block only high threshold (i.e. block less). */\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    /** Block none. */\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n    /** Turn off the safety filter. */\n    HarmBlockThreshold[\"OFF\"] = \"OFF\";\n})(HarmBlockThreshold || (exports.HarmBlockThreshold = HarmBlockThreshold = {}));\n/**\n * Harm probability levels in the content.\n */\nvar HarmProbability;\n(function (HarmProbability) {\n    /** Harm probability unspecified. */\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    /** Low level of harm. */\n    HarmProbability[\"LOW\"] = \"LOW\";\n    /** Medium level of harm. */\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    /** High level of harm. */\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (exports.HarmProbability = HarmProbability = {}));\n/**\n * Harm severity levels\n */\nvar HarmSeverity;\n(function (HarmSeverity) {\n    /** Harm severity unspecified. */\n    HarmSeverity[\"HARM_SEVERITY_UNSPECIFIED\"] = \"HARM_SEVERITY_UNSPECIFIED\";\n    /** Negligible level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_NEGLIGIBLE\"] = \"HARM_SEVERITY_NEGLIGIBLE\";\n    /** Low level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_LOW\"] = \"HARM_SEVERITY_LOW\";\n    /** Medium level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_MEDIUM\"] = \"HARM_SEVERITY_MEDIUM\";\n    /** High level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_HIGH\"] = \"HARM_SEVERITY_HIGH\";\n})(HarmSeverity || (exports.HarmSeverity = HarmSeverity = {}));\n/**\n * The reason why the reponse is blocked.\n */\nvar BlockedReason;\n(function (BlockedReason) {\n    /** Unspecified blocked reason. */\n    BlockedReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCK_REASON_UNSPECIFIED\";\n    /** Candidates blocked due to safety. */\n    BlockedReason[\"SAFETY\"] = \"SAFETY\";\n    /** Candidates blocked due to other reason. */\n    BlockedReason[\"OTHER\"] = \"OTHER\";\n    /** terminology blocklist. */\n    BlockedReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n    /** Candidates blocked due to prohibited content. */\n    BlockedReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n})(BlockedReason || (exports.BlockedReason = BlockedReason = {}));\n/**\n * The reason why the model stopped generating tokens.\n * If empty, the model has not stopped generating the tokens.\n */\nvar FinishReason;\n(function (FinishReason) {\n    /** The finish reason is unspecified. */\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    /** Natural stop point of the model or provided stop sequence. */\n    FinishReason[\"STOP\"] = \"STOP\";\n    /** The maximum number of tokens as specified in the request was reached. */\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    /**\n     * The token generation was stopped as the response was flagged for safety\n     * reasons.\n     */\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    /**\n     * The token generation was stopped as the response was flagged for\n     * unauthorized citations.\n     */\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    /** All other reasons that stopped the token generation. */\n    FinishReason[\"OTHER\"] = \"OTHER\";\n    /**\n     * The token generation was stopped as the response was flagged for the\n     * terms which are included from the terminology blocklist.\n     */\n    FinishReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n    /**\n     * The token generation was stopped as the response was flagged for\n     * the prohibited contents.\n     */\n    FinishReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n    /**\n     * The token generation was stopped as the response was flagged for\n     * Sensitive Personally Identifiable Information (SPII) contents.\n     */\n    FinishReason[\"SPII\"] = \"SPII\";\n})(FinishReason || (exports.FinishReason = FinishReason = {}));\nvar Mode;\n(function (Mode) {\n    Mode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    Mode[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n})(Mode || (exports.Mode = Mode = {}));\nexports.FunctionDeclarationSchemaType = { ...common_1.SchemaType };\n//# sourceMappingURL=content.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/content.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/errors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IllegalArgumentError = exports.GoogleGenerativeAIError = exports.GoogleAuthError = exports.GoogleApiError = exports.ClientError = void 0;\n/**\n * GoogleAuthError is thrown when there is authentication issue with the request\n */\nclass GoogleAuthError extends Error {\n    constructor(message, stackTrace) {\n        super(message, { cause: stackTrace });\n        this.message = constructErrorMessage('GoogleAuthError', message);\n        this.name = 'GoogleAuthError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.GoogleAuthError = GoogleAuthError;\n/**\n * ClientError is thrown when http 4XX status is received.\n * For details please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses\n */\nclass ClientError extends Error {\n    constructor(message, stackTrace) {\n        super(message, { cause: stackTrace });\n        this.message = constructErrorMessage('ClientError', message);\n        this.name = 'ClientError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.ClientError = ClientError;\n/**\n * GoogleApiError is thrown when http 4XX status is received.\n * See https://cloud.google.com/apis/design/errors\n */\nclass GoogleApiError extends Error {\n    constructor(message, code, status, errorDetails) {\n        super(message);\n        this.code = code;\n        this.status = status;\n        this.errorDetails = errorDetails;\n    }\n}\nexports.GoogleApiError = GoogleApiError;\n/**\n * GoogleGenerativeAIError is thrown when http response is not ok and status code is not 4XX\n * For details please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message, stackTrace) {\n        super(message, { cause: stackTrace });\n        this.message = constructErrorMessage('GoogleGenerativeAIError', message);\n        this.name = 'GoogleGenerativeAIError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.GoogleGenerativeAIError = GoogleGenerativeAIError;\n/**\n * IllegalArgumentError is thrown when the request or operation is invalid\n */\nclass IllegalArgumentError extends Error {\n    constructor(message, stackTrace) {\n        super(message, { cause: stackTrace });\n        this.message = constructErrorMessage('IllegalArgumentError', message);\n        this.name = 'IllegalArgumentError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.IllegalArgumentError = IllegalArgumentError;\nfunction constructErrorMessage(exceptionClass, message) {\n    return `[VertexAI.${exceptionClass}]: ${message}`;\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsR0FBRywrQkFBK0IsR0FBRyx1QkFBdUIsR0FBRyxzQkFBc0IsR0FBRyxtQkFBbUI7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0Esd0JBQXdCLGVBQWUsS0FBSyxRQUFRO0FBQ3BEO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbGxlZ2FsQXJndW1lbnRFcnJvciA9IGV4cG9ydHMuR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IgPSBleHBvcnRzLkdvb2dsZUF1dGhFcnJvciA9IGV4cG9ydHMuR29vZ2xlQXBpRXJyb3IgPSBleHBvcnRzLkNsaWVudEVycm9yID0gdm9pZCAwO1xuLyoqXG4gKiBHb29nbGVBdXRoRXJyb3IgaXMgdGhyb3duIHdoZW4gdGhlcmUgaXMgYXV0aGVudGljYXRpb24gaXNzdWUgd2l0aCB0aGUgcmVxdWVzdFxuICovXG5jbGFzcyBHb29nbGVBdXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhY2tUcmFjZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCB7IGNhdXNlOiBzdGFja1RyYWNlIH0pO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBjb25zdHJ1Y3RFcnJvck1lc3NhZ2UoJ0dvb2dsZUF1dGhFcnJvcicsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnR29vZ2xlQXV0aEVycm9yJztcbiAgICAgICAgdGhpcy5zdGFja1RyYWNlID0gc3RhY2tUcmFjZTtcbiAgICB9XG59XG5leHBvcnRzLkdvb2dsZUF1dGhFcnJvciA9IEdvb2dsZUF1dGhFcnJvcjtcbi8qKlxuICogQ2xpZW50RXJyb3IgaXMgdGhyb3duIHdoZW4gaHR0cCA0WFggc3RhdHVzIGlzIHJlY2VpdmVkLlxuICogRm9yIGRldGFpbHMgcGxlYXNlIHJlZmVyIHRvIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvU3RhdHVzI2NsaWVudF9lcnJvcl9yZXNwb25zZXNcbiAqL1xuY2xhc3MgQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhY2tUcmFjZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCB7IGNhdXNlOiBzdGFja1RyYWNlIH0pO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBjb25zdHJ1Y3RFcnJvck1lc3NhZ2UoJ0NsaWVudEVycm9yJywgbWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdDbGllbnRFcnJvcic7XG4gICAgICAgIHRoaXMuc3RhY2tUcmFjZSA9IHN0YWNrVHJhY2U7XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnRFcnJvciA9IENsaWVudEVycm9yO1xuLyoqXG4gKiBHb29nbGVBcGlFcnJvciBpcyB0aHJvd24gd2hlbiBodHRwIDRYWCBzdGF0dXMgaXMgcmVjZWl2ZWQuXG4gKiBTZWUgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2FwaXMvZGVzaWduL2Vycm9yc1xuICovXG5jbGFzcyBHb29nbGVBcGlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBzdGF0dXMsIGVycm9yRGV0YWlscykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMuZXJyb3JEZXRhaWxzID0gZXJyb3JEZXRhaWxzO1xuICAgIH1cbn1cbmV4cG9ydHMuR29vZ2xlQXBpRXJyb3IgPSBHb29nbGVBcGlFcnJvcjtcbi8qKlxuICogR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IgaXMgdGhyb3duIHdoZW4gaHR0cCByZXNwb25zZSBpcyBub3Qgb2sgYW5kIHN0YXR1cyBjb2RlIGlzIG5vdCA0WFhcbiAqIEZvciBkZXRhaWxzIHBsZWFzZSByZWZlciB0byBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL1N0YXR1c1xuICovXG5jbGFzcyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGFja1RyYWNlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHsgY2F1c2U6IHN0YWNrVHJhY2UgfSk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGNvbnN0cnVjdEVycm9yTWVzc2FnZSgnR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3InLCBtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0dvb2dsZUdlbmVyYXRpdmVBSUVycm9yJztcbiAgICAgICAgdGhpcy5zdGFja1RyYWNlID0gc3RhY2tUcmFjZTtcbiAgICB9XG59XG5leHBvcnRzLkdvb2dsZUdlbmVyYXRpdmVBSUVycm9yID0gR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3I7XG4vKipcbiAqIElsbGVnYWxBcmd1bWVudEVycm9yIGlzIHRocm93biB3aGVuIHRoZSByZXF1ZXN0IG9yIG9wZXJhdGlvbiBpcyBpbnZhbGlkXG4gKi9cbmNsYXNzIElsbGVnYWxBcmd1bWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YWNrVHJhY2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgeyBjYXVzZTogc3RhY2tUcmFjZSB9KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gY29uc3RydWN0RXJyb3JNZXNzYWdlKCdJbGxlZ2FsQXJndW1lbnRFcnJvcicsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnSWxsZWdhbEFyZ3VtZW50RXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrVHJhY2UgPSBzdGFja1RyYWNlO1xuICAgIH1cbn1cbmV4cG9ydHMuSWxsZWdhbEFyZ3VtZW50RXJyb3IgPSBJbGxlZ2FsQXJndW1lbnRFcnJvcjtcbmZ1bmN0aW9uIGNvbnN0cnVjdEVycm9yTWVzc2FnZShleGNlcHRpb25DbGFzcywgbWVzc2FnZSkge1xuICAgIHJldHVybiBgW1ZlcnRleEFJLiR7ZXhjZXB0aW9uQ2xhc3N9XTogJHttZXNzYWdlfWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerateContentResponseHandler = void 0;\n/** Helper class to render any extra properties out of\n * {@link GenerateContentResponse} or properties of {@link GenerateContentResponse}\n */\nclass GenerateContentResponseHandler {\n    /**\n     * Extracts function calls from a {@link GenerateContentCandidate}.\n     *\n     * @param candidate - The candidate to extract function calls from.\n     * @returns the array of function calls in a {@link GenerateContentCandidate}.\n     */\n    static getFunctionCallsFromCandidate(candidate) {\n        if (!candidate)\n            return [];\n        return candidate.content.parts\n            .filter((part) => !!part && !!part.functionCall)\n            .map((part) => part.functionCall);\n    }\n}\nexports.GenerateContentResponseHandler = GenerateContentResponseHandler;\n//# sourceMappingURL=generate_content_response_handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy9nZW5lcmF0ZV9jb250ZW50X3Jlc3BvbnNlX2hhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEM7QUFDQSxJQUFJLCtCQUErQixrQkFBa0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLCtCQUErQjtBQUN0RTtBQUNBO0FBQ0Esa0RBQWtELCtCQUErQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy9nZW5lcmF0ZV9jb250ZW50X3Jlc3BvbnNlX2hhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXIgPSB2b2lkIDA7XG4vKiogSGVscGVyIGNsYXNzIHRvIHJlbmRlciBhbnkgZXh0cmEgcHJvcGVydGllcyBvdXQgb2ZcbiAqIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZX0gb3IgcHJvcGVydGllcyBvZiB7QGxpbmsgR2VuZXJhdGVDb250ZW50UmVzcG9uc2V9XG4gKi9cbmNsYXNzIEdlbmVyYXRlQ29udGVudFJlc3BvbnNlSGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgZnVuY3Rpb24gY2FsbHMgZnJvbSBhIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRDYW5kaWRhdGV9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbmRpZGF0ZSAtIFRoZSBjYW5kaWRhdGUgdG8gZXh0cmFjdCBmdW5jdGlvbiBjYWxscyBmcm9tLlxuICAgICAqIEByZXR1cm5zIHRoZSBhcnJheSBvZiBmdW5jdGlvbiBjYWxscyBpbiBhIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRDYW5kaWRhdGV9LlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRGdW5jdGlvbkNhbGxzRnJvbUNhbmRpZGF0ZShjYW5kaWRhdGUpIHtcbiAgICAgICAgaWYgKCFjYW5kaWRhdGUpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUuY29udGVudC5wYXJ0c1xuICAgICAgICAgICAgLmZpbHRlcigocGFydCkgPT4gISFwYXJ0ICYmICEhcGFydC5mdW5jdGlvbkNhbGwpXG4gICAgICAgICAgICAubWFwKChwYXJ0KSA9PiBwYXJ0LmZ1bmN0aW9uQ2FsbCk7XG4gICAgfVxufVxuZXhwb3J0cy5HZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXIgPSBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZV9jb250ZW50X3Jlc3BvbnNlX2hhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerateContentResponseHandler = void 0;\n__exportStar(__webpack_require__(/*! ./content */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/content.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tool */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/tool.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/common.js\"), exports);\nvar generate_content_response_handler_1 = __webpack_require__(/*! ./generate_content_response_handler */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js\");\nObject.defineProperty(exports, \"GenerateContentResponseHandler\", ({ enumerable: true, get: function () { return generate_content_response_handler_1.GenerateContentResponseHandler; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQztBQUN0QyxhQUFhLG1CQUFPLENBQUMsb0dBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLGtHQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw4RkFBUTtBQUM3QixhQUFhLG1CQUFPLENBQUMsa0dBQVU7QUFDL0IsMENBQTBDLG1CQUFPLENBQUMsd0pBQXFDO0FBQ3ZGLGtFQUFpRSxFQUFFLHFDQUFxQyw4RUFBOEUsRUFBQztBQUN2TCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvdmVydGV4YWkvYnVpbGQvc3JjL3R5cGVzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXIgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29udGVudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90b29sXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb21tb25cIiksIGV4cG9ydHMpO1xudmFyIGdlbmVyYXRlX2NvbnRlbnRfcmVzcG9uc2VfaGFuZGxlcl8xID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVfY29udGVudF9yZXNwb25zZV9oYW5kbGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2VuZXJhdGVDb250ZW50UmVzcG9uc2VIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZW5lcmF0ZV9jb250ZW50X3Jlc3BvbnNlX2hhbmRsZXJfMS5HZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXI7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/tool.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/tool.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FunctionCallingMode = void 0;\n/** Function calling mode. */\nvar FunctionCallingMode;\n(function (FunctionCallingMode) {\n    /** Unspecified function calling mode. This value should not be used. */\n    FunctionCallingMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    /**\n     * Default model behavior, model decides to predict either function calls\n     * or natural language response.\n     */\n    FunctionCallingMode[\"AUTO\"] = \"AUTO\";\n    /**\n     * Model is constrained to always predicting function calls only.\n     * If \"allowedFunctionNames\" are set, the predicted function calls will be\n     * limited to any one of \"allowedFunctionNames\", else the predicted\n     * function calls will be any one of the provided \"function_declarations\".\n     */\n    FunctionCallingMode[\"ANY\"] = \"ANY\";\n    /**\n     * Model will not predict any function calls. Model behavior is same as when\n     * not passing any function declarations.\n     */\n    FunctionCallingMode[\"NONE\"] = \"NONE\";\n})(FunctionCallingMode || (exports.FunctionCallingMode = FunctionCallingMode = {}));\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy90eXBlcy90b29sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEIsMkJBQTJCLDJCQUEyQjtBQUNqRiIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvdmVydGV4YWkvYnVpbGQvc3JjL3R5cGVzL3Rvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GdW5jdGlvbkNhbGxpbmdNb2RlID0gdm9pZCAwO1xuLyoqIEZ1bmN0aW9uIGNhbGxpbmcgbW9kZS4gKi9cbnZhciBGdW5jdGlvbkNhbGxpbmdNb2RlO1xuKGZ1bmN0aW9uIChGdW5jdGlvbkNhbGxpbmdNb2RlKSB7XG4gICAgLyoqIFVuc3BlY2lmaWVkIGZ1bmN0aW9uIGNhbGxpbmcgbW9kZS4gVGhpcyB2YWx1ZSBzaG91bGQgbm90IGJlIHVzZWQuICovXG4gICAgRnVuY3Rpb25DYWxsaW5nTW9kZVtcIk1PREVfVU5TUEVDSUZJRURcIl0gPSBcIk1PREVfVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IG1vZGVsIGJlaGF2aW9yLCBtb2RlbCBkZWNpZGVzIHRvIHByZWRpY3QgZWl0aGVyIGZ1bmN0aW9uIGNhbGxzXG4gICAgICogb3IgbmF0dXJhbCBsYW5ndWFnZSByZXNwb25zZS5cbiAgICAgKi9cbiAgICBGdW5jdGlvbkNhbGxpbmdNb2RlW1wiQVVUT1wiXSA9IFwiQVVUT1wiO1xuICAgIC8qKlxuICAgICAqIE1vZGVsIGlzIGNvbnN0cmFpbmVkIHRvIGFsd2F5cyBwcmVkaWN0aW5nIGZ1bmN0aW9uIGNhbGxzIG9ubHkuXG4gICAgICogSWYgXCJhbGxvd2VkRnVuY3Rpb25OYW1lc1wiIGFyZSBzZXQsIHRoZSBwcmVkaWN0ZWQgZnVuY3Rpb24gY2FsbHMgd2lsbCBiZVxuICAgICAqIGxpbWl0ZWQgdG8gYW55IG9uZSBvZiBcImFsbG93ZWRGdW5jdGlvbk5hbWVzXCIsIGVsc2UgdGhlIHByZWRpY3RlZFxuICAgICAqIGZ1bmN0aW9uIGNhbGxzIHdpbGwgYmUgYW55IG9uZSBvZiB0aGUgcHJvdmlkZWQgXCJmdW5jdGlvbl9kZWNsYXJhdGlvbnNcIi5cbiAgICAgKi9cbiAgICBGdW5jdGlvbkNhbGxpbmdNb2RlW1wiQU5ZXCJdID0gXCJBTllcIjtcbiAgICAvKipcbiAgICAgKiBNb2RlbCB3aWxsIG5vdCBwcmVkaWN0IGFueSBmdW5jdGlvbiBjYWxscy4gTW9kZWwgYmVoYXZpb3IgaXMgc2FtZSBhcyB3aGVuXG4gICAgICogbm90IHBhc3NpbmcgYW55IGZ1bmN0aW9uIGRlY2xhcmF0aW9ucy5cbiAgICAgKi9cbiAgICBGdW5jdGlvbkNhbGxpbmdNb2RlW1wiTk9ORVwiXSA9IFwiTk9ORVwiO1xufSkoRnVuY3Rpb25DYWxsaW5nTW9kZSB8fCAoZXhwb3J0cy5GdW5jdGlvbkNhbGxpbmdNb2RlID0gRnVuY3Rpb25DYWxsaW5nTW9kZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b29sLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/tool.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/util/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CREDENTIAL_ERROR_MESSAGE = exports.USER_AGENT = exports.SYSTEM_ROLE = exports.MODEL_ROLE = exports.USER_ROLE = exports.COUNT_TOKENS_METHOD = exports.STREAMING_GENERATE_CONTENT_METHOD = exports.GENERATE_CONTENT_METHOD = void 0;\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.GENERATE_CONTENT_METHOD = 'generateContent';\nexports.STREAMING_GENERATE_CONTENT_METHOD = 'streamGenerateContent';\nexports.COUNT_TOKENS_METHOD = 'countTokens';\nexports.USER_ROLE = 'user';\nexports.MODEL_ROLE = 'model';\nexports.SYSTEM_ROLE = 'system';\nconst USER_AGENT_PRODUCT = 'model-builder';\nconst CLIENT_LIBRARY_VERSION = '1.10.0'; // x-release-please-version\nconst CLIENT_LIBRARY_LANGUAGE = `grpc-node/${CLIENT_LIBRARY_VERSION}`;\nexports.USER_AGENT = `${USER_AGENT_PRODUCT}/${CLIENT_LIBRARY_VERSION} ${CLIENT_LIBRARY_LANGUAGE}`;\nexports.CREDENTIAL_ERROR_MESSAGE = '\\nUnable to authenticate your request\\\n        \\nDepending on your run time environment, you can get authentication by\\\n        \\n- if in local instance or cloud shell: `!gcloud auth login`\\\n        \\n- if in Colab:\\\n        \\n    -`from google.colab import auth`\\\n        \\n    -`auth.authenticate_user()`\\\n        \\n- if in service account or other: please follow guidance in https://cloud.google.com/docs/authentication';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy91dGlsL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxpQkFBaUIsR0FBRywyQkFBMkIsR0FBRyx5Q0FBeUMsR0FBRywrQkFBK0I7QUFDaE87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IseUNBQXlDO0FBQ3pDLDJCQUEyQjtBQUMzQixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLG1CQUFtQjtBQUNuQjtBQUNBLHlDQUF5QztBQUN6Qyw2Q0FBNkMsdUJBQXVCO0FBQ3BFLGtCQUFrQixNQUFNLG1CQUFtQixHQUFHLHdCQUF3QixFQUFFLHdCQUF3QjtBQUNoRyxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy91dGlsL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ1JFREVOVElBTF9FUlJPUl9NRVNTQUdFID0gZXhwb3J0cy5VU0VSX0FHRU5UID0gZXhwb3J0cy5TWVNURU1fUk9MRSA9IGV4cG9ydHMuTU9ERUxfUk9MRSA9IGV4cG9ydHMuVVNFUl9ST0xFID0gZXhwb3J0cy5DT1VOVF9UT0tFTlNfTUVUSE9EID0gZXhwb3J0cy5TVFJFQU1JTkdfR0VORVJBVEVfQ09OVEVOVF9NRVRIT0QgPSBleHBvcnRzLkdFTkVSQVRFX0NPTlRFTlRfTUVUSE9EID0gdm9pZCAwO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydHMuR0VORVJBVEVfQ09OVEVOVF9NRVRIT0QgPSAnZ2VuZXJhdGVDb250ZW50JztcbmV4cG9ydHMuU1RSRUFNSU5HX0dFTkVSQVRFX0NPTlRFTlRfTUVUSE9EID0gJ3N0cmVhbUdlbmVyYXRlQ29udGVudCc7XG5leHBvcnRzLkNPVU5UX1RPS0VOU19NRVRIT0QgPSAnY291bnRUb2tlbnMnO1xuZXhwb3J0cy5VU0VSX1JPTEUgPSAndXNlcic7XG5leHBvcnRzLk1PREVMX1JPTEUgPSAnbW9kZWwnO1xuZXhwb3J0cy5TWVNURU1fUk9MRSA9ICdzeXN0ZW0nO1xuY29uc3QgVVNFUl9BR0VOVF9QUk9EVUNUID0gJ21vZGVsLWJ1aWxkZXInO1xuY29uc3QgQ0xJRU5UX0xJQlJBUllfVkVSU0lPTiA9ICcxLjEwLjAnOyAvLyB4LXJlbGVhc2UtcGxlYXNlLXZlcnNpb25cbmNvbnN0IENMSUVOVF9MSUJSQVJZX0xBTkdVQUdFID0gYGdycGMtbm9kZS8ke0NMSUVOVF9MSUJSQVJZX1ZFUlNJT059YDtcbmV4cG9ydHMuVVNFUl9BR0VOVCA9IGAke1VTRVJfQUdFTlRfUFJPRFVDVH0vJHtDTElFTlRfTElCUkFSWV9WRVJTSU9OfSAke0NMSUVOVF9MSUJSQVJZX0xBTkdVQUdFfWA7XG5leHBvcnRzLkNSRURFTlRJQUxfRVJST1JfTUVTU0FHRSA9ICdcXG5VbmFibGUgdG8gYXV0aGVudGljYXRlIHlvdXIgcmVxdWVzdFxcXG4gICAgICAgIFxcbkRlcGVuZGluZyBvbiB5b3VyIHJ1biB0aW1lIGVudmlyb25tZW50LCB5b3UgY2FuIGdldCBhdXRoZW50aWNhdGlvbiBieVxcXG4gICAgICAgIFxcbi0gaWYgaW4gbG9jYWwgaW5zdGFuY2Ugb3IgY2xvdWQgc2hlbGw6IGAhZ2Nsb3VkIGF1dGggbG9naW5gXFxcbiAgICAgICAgXFxuLSBpZiBpbiBDb2xhYjpcXFxuICAgICAgICBcXG4gICAgLWBmcm9tIGdvb2dsZS5jb2xhYiBpbXBvcnQgYXV0aGBcXFxuICAgICAgICBcXG4gICAgLWBhdXRoLmF1dGhlbnRpY2F0ZV91c2VyKClgXFxcbiAgICAgICAgXFxuLSBpZiBpbiBzZXJ2aWNlIGFjY291bnQgb3Igb3RoZXI6IHBsZWFzZSBmb2xsb3cgZ3VpZGFuY2UgaW4gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvYXV0aGVudGljYXRpb24nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/util/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.constants = void 0;\nexports.constants = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy91dGlsL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGdKQUEwQztBQUMxQyIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvdmVydGV4YWkvYnVpbGQvc3JjL3V0aWwvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25zdGFudHMgPSB2b2lkIDA7XG5leHBvcnRzLmNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VertexAI = void 0;\n/* tslint:disable */\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(action-browser)/./node_modules/google-auth-library/build/src/index.js\");\nconst models_1 = __webpack_require__(/*! ./models */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/models/index.js\");\nconst errors_1 = __webpack_require__(/*! ./types/errors */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst Resources = __webpack_require__(/*! ./resources */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/index.js\");\nconst cached_contents_1 = __webpack_require__(/*! ./resources/cached_contents */ \"(action-browser)/./node_modules/@google-cloud/vertexai/build/src/resources/cached_contents.js\");\n/**\n * The `VertexAI` class is the base class for authenticating to Vertex AI.\n * To use Vertex AI's generative AI models, use the `getGenerativeModel` method.\n * To use generative AI features that are in Preview, use the `preview`\n * namespace.\n */\nclass VertexAI {\n    /**\n     * @constructor\n     * @param init - assign authentication related information,\n     *     including the project and location strings, to instantiate a Vertex AI\n     * client.\n     * @throws {IllegalArgumentError}\n  \n     */\n    constructor(init) {\n        const opts = validateGoogleAuthOptions(init.project, init.googleAuthOptions);\n        this.location = resolveLocation(init.location);\n        this.project = resolveProject(init.project);\n        this.googleAuth = new google_auth_library_1.GoogleAuth(opts);\n        this.apiEndpoint = init.apiEndpoint;\n        this.preview = new VertexAIPreview(this.project, this.location, this.googleAuth, this.apiEndpoint);\n    }\n    /**\n     * Gets the GenerativeModel class instance.\n     *\n     * This method creates a new instance of the `GenerativeModel` class with the\n     * platform initialization parameters provided in {@link VertexInit} and model\n     * initialization parameters provided in {@link ModelParams}. You can\n     * optionally provide {@link RequestOptions} to override the default request\n     * options.\n     *\n     * @example\n     * ```\n     * const project = 'your-cloud-project';\n     * const location = 'us-central1';\n     * const textModel =  'gemini-1.0-pro';\n     * const visionModel = 'gemini-1.0-pro-vision';\n     *\n     * const vertexAI = new VertexAI({project: project, location: location});\n     *\n     * // Instantiate models\n     * const generativeModel = vertexAI.getGenerativeModel({\n     *   model: textModel,\n     *   // The following parameters are optional\n     *   // They can also be passed to individual content generation requests\n     *   safetySettings: [{\n     *                      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n     *                      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n     *                     }],\n     *   generationConfig: {maxOutputTokens: 256},\n     * });\n     *\n     * const generativeVisionModel = vertexAI.getGenerativeModel({\n     *   model: visionModel,\n     * });\n     *\n     * const generativeModelPreview = vertexAI.preview.getGenerativeModel({\n     *   model: textModel,\n     * });\n     * ```\n     *\n     * @param modelParams - {@link ModelParams} Parameters to\n     *     specify the generative model.\n     * @param requestOptions - {@link RequestOptions} Parameters to specify\n     *     request options\n     * @returns Instance of the GenerativeModel class.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        const getGenerativeModelParams = {\n            model: modelParams.model,\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            apiEndpoint: this.apiEndpoint,\n            safetySettings: modelParams.safetySettings,\n            generationConfig: modelParams.generationConfig,\n            tools: modelParams.tools,\n            toolConfig: modelParams.toolConfig,\n            requestOptions: requestOptions,\n            systemInstruction: modelParams.systemInstruction,\n        };\n        return new models_1.GenerativeModel(getGenerativeModelParams);\n    }\n    getProject() {\n        return this.project;\n    }\n    getLocation() {\n        return this.location;\n    }\n}\nexports.VertexAI = VertexAI;\n/**\n * The preview namespace for VertexAI. Users invoke the `getGenerativeModel`\n * method to start using generative AI features that are in preview.\n */\nclass VertexAIPreview {\n    /**\n     * @constructor\n     * @param project - The Google Cloud project to use for the request\n     * @param location - location The Google Cloud project location to use for the\n     *     request\n     * @param googleAuth - The GoogleAuthen class instance from\n     *     google-auth-library.\n     *        Complete list of authentication options is documented in the\n     * GoogleAuthOptions interface:\n     *        https://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts\n     * @param apiEndpoint - [apiEndpoint] The base Vertex AI endpoint to use for\n     *     the request. If\n     *        not provided, the default regionalized endpoint\n     *        (i.e. us-central1-aiplatform.googleapis.com) will be used.\n     */\n    constructor(project, location, googleAuth, apiEndpoint) {\n        this.project = project;\n        this.location = location;\n        this.googleAuth = googleAuth;\n        this.apiEndpoint = apiEndpoint;\n        this.apiClient = new Resources.ApiClient(this.project, this.location, 'v1beta1', this.googleAuth);\n        this.cachedContents = new Resources.CachedContents(this.apiClient);\n    }\n    /**\n     * @param modelParams - {@link ModelParams} Parameters to\n     *     specify the generative model.\n     * @returns Instance of the GenerativeModelPreview class.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        const getGenerativeModelParams = {\n            model: modelParams.model,\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            apiEndpoint: this.apiEndpoint,\n            safetySettings: modelParams.safetySettings,\n            generationConfig: modelParams.generationConfig,\n            tools: modelParams.tools,\n            toolConfig: modelParams.toolConfig,\n            requestOptions: requestOptions,\n            systemInstruction: modelParams.systemInstruction,\n        };\n        return new models_1.GenerativeModelPreview(getGenerativeModelParams);\n    }\n    getGenerativeModelFromCachedContent(cachedContent, modelParams, requestOptions) {\n        if (!cachedContent.name) {\n            throw new errors_1.ClientError('Cached content must contain a `name` field.');\n        }\n        if (!cachedContent.model) {\n            throw new errors_1.ClientError('Cached content must contain a `model` field.');\n        }\n        validateCachedContentModel(cachedContent.model);\n        /**\n         * Not checking tools and toolConfig for now as it would require a deep\n         * equality comparison and isn't likely to be a common case.\n         */\n        const disallowedDuplicates = ['model', 'systemInstruction'];\n        for (const key of disallowedDuplicates) {\n            if ((modelParams === null || modelParams === void 0 ? void 0 : modelParams[key]) &&\n                cachedContent[key] &&\n                (modelParams === null || modelParams === void 0 ? void 0 : modelParams[key]) !== cachedContent[key]) {\n                if (key === 'model') {\n                    const modelParamsComp = parseModelName(modelParams[key]);\n                    const cachedContentComp = parseModelName(cachedContent[key]);\n                    if (modelParamsComp === cachedContentComp) {\n                        continue;\n                    }\n                }\n                throw new errors_1.ClientError(`Different value for \"${key}\" specified in modelParams` +\n                    ` (${modelParams[key]}) and cachedContent (${cachedContent[key]})`);\n            }\n        }\n        cachedContent.name = (0, cached_contents_1.inferFullResourceName)(this.project, this.location, cachedContent.name);\n        const modelParamsFromCache = {\n            model: cachedContent.model,\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            apiEndpoint: this.apiEndpoint,\n            safetySettings: modelParams === null || modelParams === void 0 ? void 0 : modelParams.safetySettings,\n            generationConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.generationConfig,\n            tools: cachedContent.tools,\n            toolConfig: cachedContent.toolConfig,\n            requestOptions: requestOptions,\n            systemInstruction: cachedContent.systemInstruction,\n            cachedContent,\n        };\n        return new models_1.GenerativeModelPreview(modelParamsFromCache);\n    }\n}\nfunction validateCachedContentModel(modelName) {\n    if (modelName.startsWith('models/') ||\n        (modelName.startsWith('projects/') &&\n            modelName.includes('/publishers/google/models/')) ||\n        !modelName.includes('/')) {\n        return;\n    }\n    throw new errors_1.ClientError(`Cached content model name must start with \"models/\" or match \"projects/.*/publishers/google/models/.*\" or is a model name listed at https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versions. Received: ${modelName}`);\n}\nfunction parseModelName(modelName) {\n    if (!modelName.includes('/')) {\n        return modelName;\n    }\n    return modelName.split('/').pop();\n}\nfunction validateGoogleAuthOptions(project, googleAuthOptions) {\n    let opts;\n    const requiredScope = 'https://www.googleapis.com/auth/cloud-platform';\n    if (!googleAuthOptions) {\n        opts = {\n            scopes: requiredScope,\n        };\n        return opts;\n    }\n    if (googleAuthOptions.projectId && googleAuthOptions.projectId !== project) {\n        throw new Error(`inconsistent project ID values. argument project got value ${project} but googleAuthOptions.projectId got value ${googleAuthOptions.projectId}`);\n    }\n    opts = googleAuthOptions;\n    if (!opts.scopes) {\n        opts.scopes = requiredScope;\n        return opts;\n    }\n    if ((typeof opts.scopes === 'string' && opts.scopes !== requiredScope) ||\n        (Array.isArray(opts.scopes) && opts.scopes.indexOf(requiredScope) < 0)) {\n        throw new errors_1.GoogleAuthError(`input GoogleAuthOptions.scopes ${opts.scopes} doesn't contain required scope ${requiredScope}, please include ${requiredScope} into GoogleAuthOptions.scopes or leave GoogleAuthOptions.scopes undefined`);\n    }\n    return opts;\n}\nfunction resolveProject(projectFromInput) {\n    const projectNotFoundErrorMessage = 'Unable to infer your project.' +\n        'Please provide a project Id by one of the following:' +\n        '\\n- Passing a constructor argument by using new VertexAI({project: my-project})' +\n        '\\n- Setting project using `gcloud config set project my-project`';\n    if (projectFromInput) {\n        return projectFromInput;\n    }\n    const inferredProjectFromEnv = process.env['GOOGLE_CLOUD_PROJECT'];\n    if (inferredProjectFromEnv) {\n        return inferredProjectFromEnv;\n    }\n    throw new errors_1.IllegalArgumentError(projectNotFoundErrorMessage);\n}\nfunction resolveLocation(locationFromInput) {\n    if (locationFromInput) {\n        return locationFromInput;\n    }\n    const inferredLocation = process.env['GOOGLE_CLOUD_REGION'] || process.env['CLOUD_ML_REGION'];\n    if (inferredLocation) {\n        return inferredLocation;\n    }\n    return 'us-central1';\n}\n//# sourceMappingURL=vertex_ai.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js\n");

/***/ })

};
;